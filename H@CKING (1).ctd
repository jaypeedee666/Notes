<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <bookmarks list=""/>
  <node name="Tools" unique_id="1" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646792458" ts_lastsave="1660507761">
    <node name="NMap" unique_id="6" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646792561" ts_lastsave="1648596073">
      <rich_text>
</rich_text>
      <rich_text scale="h1">NMAP Cheat Sheet</rich_text>
      <rich_text>
Base nmap Syntax:
</rich_text>
      <rich_text family="monospace">nmap [ScanType] [Options] {targets}
</rich_text>
      <rich_text>
If no port range is specified, Nmap scans the 1,000 most popular ports.
• </rich_text>
      <rich_text family="monospace">-p &lt;port1&gt;-&lt;port2&gt;</rich_text>
      <rich_text>: Scans a port range
• </rich_text>
      <rich_text family="monospace">-p &lt;port1&gt;,&lt;port2&gt;,...</rich_text>
      <rich_text>: Scans a port list
• </rich_text>
      <rich_text family="monospace">-pU:53,U:110,T20-445</rich_text>
      <rich_text>: Mix TCP and UDP
• </rich_text>
      <rich_text family="monospace">-r</rich_text>
      <rich_text>: Scans linearly (does not randomize ports)
• </rich_text>
      <rich_text family="monospace">--top-ports &lt;n&gt;</rich_text>
      <rich_text>: Scan n most popular ports
• </rich_text>
      <rich_text family="monospace">-p-65535</rich_text>
      <rich_text>: Leaving off the initial port in range makes Nmap scan start at port 1
• </rich_text>
      <rich_text family="monospace">-p-</rich_text>
      <rich_text>: Leaving off the end port in range makes Nmap scan all ports
• </rich_text>
      <rich_text family="monospace">-F</rich_text>
      <rich_text>: (Fast (limited port) scan)




</rich_text>
      <rich_text scale="h2">Port Status</rich_text>
      <rich_text>
◇ Open: This indicates that an application is listening for connections on this port.
◇ Closed: This indicates that the probes were received but there is no application listening on this port.
◇ Filtered: This indicates that the probes were not received and the state could not be established. It also indicates that the probes are being dropped by some kind of filtering.
◇ Unfiltered: This indicates that the probes were received but a state could not be established.
◇ Open/Filtered: This indicates that the port was filtered or open but Nmap couldn’t establish the state.
◇ Closed/Filtered: This indicates that the port was filtered or closed but Nmap couldn’t establish the state.




</rich_text>
      <rich_text scale="h2">Scan Types</rich_text>
      <rich_text>
◇ </rich_text>
      <rich_text family="monospace">-sn</rich_text>
      <rich_text>: Probe only (host discovery, not port scan)
◇ </rich_text>
      <rich_text family="monospace">-sS</rich_text>
      <rich_text>: SYN Scan
◇ </rich_text>
      <rich_text family="monospace">-sT</rich_text>
      <rich_text>: TCP Connect Scan
◇ </rich_text>
      <rich_text family="monospace">-sU</rich_text>
      <rich_text>: UDP Scan
◇ </rich_text>
      <rich_text family="monospace">-sV</rich_text>
      <rich_text>: Version Scan
◇ </rich_text>
      <rich_text family="monospace">-O</rich_text>
      <rich_text>: Used for OS Detection/fingerprinting
◇ </rich_text>
      <rich_text family="monospace">--scanflags</rich_text>
      <rich_text>: Sets custom list of TCP using </rich_text>
      <rich_text family="monospace">URG ACK PSH RST SYN FIN</rich_text>
      <rich_text> in any order




</rich_text>
      <rich_text scale="h2">Probing Options</rich_text>
      <rich_text>
◇ </rich_text>
      <rich_text family="monospace">-Pn</rich_text>
      <rich_text>: Don't probe (assume all hosts are up)
◇ </rich_text>
      <rich_text family="monospace">-PB</rich_text>
      <rich_text>: Default probe (TCP 80, 445 &amp; ICMP)
◇ </rich_text>
      <rich_text family="monospace">-PS&lt;portlist&gt;</rich_text>
      <rich_text> : Checks if ssytems are online by probing TCP ports
◇ </rich_text>
      <rich_text family="monospace">-PE</rich_text>
      <rich_text>: Using ICMP Echo Request
◇ </rich_text>
      <rich_text family="monospace">-PP</rich_text>
      <rich_text>: Using ICMP Timestamp Request
◇ </rich_text>
      <rich_text family="monospace">-PM</rich_text>
      <rich_text>: Using ICMP Netmask Request




</rich_text>
      <rich_text scale="h2">Timing Options</rich_text>
      <rich_text>
◇ </rich_text>
      <rich_text family="monospace">-T0</rich_text>
      <rich_text> (Paranoid): Very slow, used for IDS evasion
◇ </rich_text>
      <rich_text family="monospace">-T1</rich_text>
      <rich_text> (Sneaky): Quite slow, used for IDS evasion
◇ </rich_text>
      <rich_text family="monospace">-T2</rich_text>
      <rich_text> (Polite): Slows down to consume less bandwidth, runs ~10 times slower than default
◇ </rich_text>
      <rich_text family="monospace">-T3</rich_text>
      <rich_text> (Normal): Default, a dynamic timing model based on target responsiveness
◇ </rich_text>
      <rich_text family="monospace">-T4</rich_text>
      <rich_text> (Aggressive): Assumes a fast and reliable network and may overwhelm targets
◇ </rich_text>
      <rich_text family="monospace">-T5</rich_text>
      <rich_text> (Insane): Very aggressive; will likely overwhelm targets or miss open ports




</rich_text>
      <rich_text scale="h2">Fine-Grained Timing Options</rich_text>
      <rich_text>
◇ </rich_text>
      <rich_text family="monospace">--min-hostgroup/max-hostgroup &lt;size&gt; </rich_text>
      <rich_text>: Parallel host scan group sizes
◇ </rich_text>
      <rich_text family="monospace">--min-parallelism/max-parallelism &lt;numprobes&gt;</rich_text>
      <rich_text>: Probes parallelization
◇ </rich_text>
      <rich_text family="monospace">--min-rtt-timeout/max-rtttimeout/initial-rtt-timeout &lt;time&gt;</rich_text>
      <rich_text>: Specifies probe round trip time.
◇ </rich_text>
      <rich_text family="monospace">--max-retries &lt;tries&gt;</rich_text>
      <rich_text>: Caps number of port scan probe retransmissions.
◇ </rich_text>
      <rich_text family="monospace">--host-timeout &lt;time&gt;</rich_text>
      <rich_text>: Gives up on target after this long
◇ </rich_text>
      <rich_text family="monospace">--scan-delay/--max-scan-delay &lt;time&gt;</rich_text>
      <rich_text>: Adjusts delay between probes
◇ </rich_text>
      <rich_text family="monospace">--min-rate &lt;number&gt;</rich_text>
      <rich_text>: Send packets no slower than </rich_text>
      <rich_text family="monospace">&lt;number&gt;</rich_text>
      <rich_text> per second
◇ </rich_text>
      <rich_text family="monospace">--max-rate &lt;number&gt;</rich_text>
      <rich_text>: Send packets no faster than </rich_text>
      <rich_text family="monospace">&lt;number&gt;</rich_text>
      <rich_text> per second




</rich_text>
      <rich_text scale="h2">Nmap Scripting Engine</rich_text>
      <rich_text>
The full list of Nmap Scripting Engine scripts: </rich_text>
      <rich_text link="webs http://nmap.org/nsedoc/">http://nmap.org/nsedoc/</rich_text>
      <rich_text>
</rich_text>
      <rich_text family="monospace">nmap -sC</rich_text>
      <rich_text> runs default scripts...
Running individual or groups of scripts: </rich_text>
      <rich_text family="monospace">nmap --script=&lt;ScriptName&gt;| &lt;ScriptCategory&gt;|&lt;ScriptDir&gt;</rich_text>
      <rich_text>
Using the list of script arguments: </rich_text>
      <rich_text family="monospace">nmap --script-args=&lt;Name1=Value1,...&gt;</rich_text>
      <rich_text>
Updating the script database: </rich_text>
      <rich_text family="monospace">nmap --script-updatedb</rich_text>
      <rich_text>
Some particularly useful scripts include:
◇ dns-zone-transfer: Attempts to pull a zone file (AXFR) from a DNS server.

</rich_text>
      <rich_text family="monospace">$ nmap --script dns-zonetransfer.nse --script-args dns-zonetransfer.domain=&lt;domain&gt; -p53 &lt;hosts&gt;
</rich_text>
      <rich_text>
◇ http-robots.txt: Harvests robots.txt files from discovered web servers.

</rich_text>
      <rich_text family="monospace">$ nmap --script http-robots.txt &lt;hosts&gt;
</rich_text>
      <rich_text>
◇ smb-brute: Attempts to determine valid username and password combinations via automated guessing.

</rich_text>
      <rich_text family="monospace">$ nmap --script smb-brute.nse -p445 &lt;hosts&gt;
</rich_text>
      <rich_text>
◇ smb-psexec: Attempts to run a series of programs on the target machine, using credentials provided as scriptargs.

</rich_text>
      <rich_text family="monospace">$ nmap --script smb-psexec.nse –script-args=smbuser=&lt;username&gt;,smbpass=&lt;password&gt;[,config=&lt;config&gt;] -p445 &lt;hosts&gt;
</rich_text>
      <rich_text>



</rich_text>
      <rich_text scale="h3">Nmap Scripting Engine Categories</rich_text>
      <rich_text>
The most common Nmap scripting engine categories:
◇ auth: Utilize credentials or bypass authentication on target hosts.
◇ broadcast: Discover hosts not included on command line by broadcasting on local network.
◇ brute: Attempt to guess passwords on target systems, for a variety of protocols, including http, SNMP, IAX, MySQL, VNC, etc.
◇ default: Scripts run automatically when -sC or -A are used.
◇ discovery: Try to learn more information about target hosts through public sources of information, SNMP, directory services, and more.
◇ dos: May cause denial of service conditions in target hosts.
◇ exploit: Attempt to exploit target systems.
◇ external: Interact with third-party systems not included in target list.
◇ fuzzer: Send unexpected input in network protocol fields.
◇ intrusive: May crash target, consume excessive resources, or otherwise impact target machines in a malicious fashion.
◇ malware: Look for signs of malware infection on the target hosts.
◇ safe: Designed not to impact target in a negative fashion.
◇ version: Measure the version of software or protocols on the target hosts.
◇ vul: Measure whether target systems have a known vulnerability.




</rich_text>
      <rich_text scale="h2">Output Options</rich_text>
      <rich_text>
◇ </rich_text>
      <rich_text family="monospace">-oN</rich_text>
      <rich_text>: Standard Nmap output
◇ </rich_text>
      <rich_text family="monospace">-oG</rich_text>
      <rich_text>: Greppable format
◇ </rich_text>
      <rich_text family="monospace">-oX</rich_text>
      <rich_text>: XML format
◇ </rich_text>
      <rich_text family="monospace">-oA</rich_text>
      <rich_text>:  Generate Nmap, Greppable, and XML output files using basename for files




</rich_text>
      <rich_text scale="h2">Additional Options</rich_text>
      <rich_text>
◇ </rich_text>
      <rich_text family="monospace">-n</rich_text>
      <rich_text>: Disables reverse IP address lookups
◇ </rich_text>
      <rich_text family="monospace">-6</rich_text>
      <rich_text>: Uses IPv6 only
◇ </rich_text>
      <rich_text family="monospace">-A</rich_text>
      <rich_text>: Uses several features, including OS Detection, Version Detection, Script Scanning (default), and traceroute
◇ </rich_text>
      <rich_text family="monospace">--reason</rich_text>
      <rich_text>: Displays the reason Nmap thinks that the port is open, closed, or filtered

</rich_text>
      <node name="Scripts" unique_id="17" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646793657" ts_lastsave="1647299591">
        <rich_text>nmap --script {enter script here}

</rich_text>
        <rich_text scale="h2" weight="heavy">vuln</rich_text>
        <rich_text>
Vulnerability scanner

</rich_text>
        <rich_text scale="h2" weight="heavy">dos</rich_text>
        <rich_text>



</rich_text>
        <rich_text scale="h2" weight="heavy">http-enum.nse</rich_text>
        <rich_text>
The </rich_text>
        <rich_text weight="heavy">http-enum</rich_text>
        <rich_text> script, using the default fingerprints database, sends over 2,000 queries to the web server, trying to reach files and/or directories specific to popular web applications. If the server returns the code “</rich_text>
        <rich_text style="italic">200 OK</rich_text>
        <rich_text>” or “</rich_text>
        <rich_text style="italic">401 Authentication Required</rich_text>
        <rich_text>” to any of the queries, it will mean that the desired file or directory is available on the server, and then the fingerprint script will return the name of the application.

</rich_text>
        <rich_text scale="h2" weight="heavy">http-grep.nse</rich_text>
        <rich_text>
The </rich_text>
        <rich_text weight="heavy">http-grep</rich_text>
        <rich_text> script searches the given page for  useful information. By default, it returns the e-mail addresses and IP  addresses found on all subpages discovered by the script. We can give  the script in the </rich_text>
        <rich_text weight="heavy">http-grep.url</rich_text>
        <rich_text> argument subpage that we want to search, and using the argument, </rich_text>
        <rich_text weight="heavy">http-grep.builtins</rich_text>
        <rich_text>,  we will extend the scope of the search to email addresses, IP  addresses, phone numbers, mastercard, visa, discover, amex, and ssn  cards. If we want to add a word or regular expression to be searched, we  pass it to the argument, </rich_text>
        <rich_text weight="heavy">http-grep.match</rich_text>
        <rich_text>. By default, set to 3, the search depth can be changed using the </rich_text>
        <rich_text weight="heavy">http-grep.maxdepth</rich_text>
        <rich_text> argument.

</rich_text>
        <rich_text scale="h2" weight="heavy">ssh-brute.nse</rich_text>
        <rich_text>
The </rich_text>
        <rich_text weight="heavy">ssh-brute </rich_text>
        <rich_text>script is used to break </rich_text>
        <rich_text link="webs https://en.wikipedia.org/wiki/Secure_Shell">SSH</rich_text>
        <rich_text>  service passwords with predictive text input. By default, it uses its  own database, rather an extensive database of users and passwords.  However, you can pass our letters to the script using the </rich_text>
        <rich_text weight="heavy">userdb </rich_text>
        <rich_text>and </rich_text>
        <rich_text weight="heavy">passdb </rich_text>
        <rich_text>arguments.

</rich_text>
        <rich_text scale="h2" weight="heavy">dns-brute.nse</rich_text>
        <rich_text>
The </rich_text>
        <rich_text weight="heavy">dns-brute </rich_text>
        <rich_text>script tries to find as many </rich_text>
        <rich_text link="webs https://en.wikipedia.org/wiki/Subdomain">subdomains</rich_text>
        <rich_text> as the host is being tested using the most frequently used subdomain names.

</rich_text>
        <rich_text scale="h2" weight="heavy">http-config-backup.nse</rich_text>
        <rich_text>
The </rich_text>
        <rich_text weight="heavy">http-config-backup </rich_text>
        <rich_text>script sends many queries to the web server, trying to get a copy of the configuration of popular </rich_text>
        <rich_text link="webs https://en.wikipedia.org/wiki/Content_management_system">CMS</rich_text>
        <rich_text> left behind by the user or text editor. According to the research conducted by the author of the </rich_text>
        <rich_text link="webs https://feross.org/cmsploit/">CMSploit</rich_text>
        <rich_text> tool, which is inspired by the </rich_text>
        <rich_text weight="heavy">http-config-backup </rich_text>
        <rich_text>script, almost 1% of websites using CMS reveal their access data to the database through left copies of the configuration.

</rich_text>
        <rich_text scale="h2" weight="heavy">http-wordpress-enum.nse</rich_text>
        <rich_text>
The </rich_text>
        <rich_text weight="heavy">http-wordpress-enum </rich_text>
        <rich_text>script, using the </rich_text>
        <rich_text style="italic">wp-themes.lst</rich_text>
        <rich_text> database containing about 32 thousand entries and the </rich_text>
        <rich_text style="italic">wp-plugins.lst</rich_text>
        <rich_text>  database with over 14,000 WordPress plugins, checks which themes and  plugins have been installed on the scanned site. The names in the  databases are sorted by popularity. Passing a number in the </rich_text>
        <rich_text weight="heavy">http-wordpress-enum.search-limit</rich_text>
        <rich_text>  argument will change the default value of checking for the 100 most  popular plugins and themes, and when we pass “all,” all names from the  databases will be checked. If WordPress on the tested server has been  installed in a non-standard directory, we indicate its path in the </rich_text>
        <rich_text weight="heavy">http-wordpress-enum.root</rich_text>
        <rich_text> argument. Another useful parameter is </rich_text>
        <rich_text weight="heavy">http-wordpress-enum.check-latest</rich_text>
        <rich_text>, which will check the validity of the plugins and motives if we pass “</rich_text>
        <rich_text style="italic">true.</rich_text>
        <rich_text>“

</rich_text>
        <rich_text scale="h2" weight="heavy">mysql-empty-password.nse</rich_text>
        <rich_text>
The </rich_text>
        <rich_text weight="heavy">mysql-empty-password </rich_text>
        <rich_text>script checks whether it is possible to log in to the MySQL server to the root or </rich_text>
        <rich_text style="italic">anonymous </rich_text>
        <rich_text>account using an empty password.

</rich_text>
        <rich_text family="monospace" scale="h1">smb-enum-shares</rich_text>
        <rich_text>.nse
 Attempts to list shares using the </rich_text>
        <rich_text family="monospace">srvsvc.NetShareEnumAll</rich_text>
        <rich_text> MSRPC function and retrieve more information about them using </rich_text>
        <rich_text family="monospace">srvsvc.NetShareGetInfo</rich_text>
        <rich_text>. If access to those functions is denied, a list of common share names are checked. 
 Finding open shares is useful to a penetration tester because there may be private files shared, or, if it's writable, it could be a good place to drop a Trojan or to infect a file that's already there. Knowing where the share is could make those kinds of tests more useful, except that determining where the share is requires administrative privileges already. 
 Running </rich_text>
        <rich_text family="monospace">NetShareEnumAll</rich_text>
        <rich_text> will work anonymously against Windows 2000, and requires a user-level account on any other Windows version. Calling </rich_text>
        <rich_text family="monospace">NetShareGetInfo</rich_text>
        <rich_text> requires an administrator account on all versions of Windows up to 2003, as well as Windows Vista and Windows 7, if UAC is turned down. 
 Even if </rich_text>
        <rich_text family="monospace">NetShareEnumAll</rich_text>
        <rich_text> is restricted, attempting to connect to a share will always reveal its existence. So, if </rich_text>
        <rich_text family="monospace">NetShareEnumAll</rich_text>
        <rich_text> fails, a pre-generated list of shares, based on a large test network, are used. If any of those succeed, they are recorded. 
 After a list of shares is found, the script attempts to connect to each of them anonymously, which divides them into "anonymous", for shares that the NULL user can connect to, or "restricted", for shares that require a user account.

</rich_text>
      </node>
    </node>
    <node name="Metasploit" unique_id="7" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646792567" ts_lastsave="1649687855">
      <rich_text>Once we have </rich_text>
      <rich_text family="monospace">Metasploit</rich_text>
      <rich_text> running, we can search for our target application with the </rich_text>
      <rich_text family="monospace">search exploit</rich_text>
      <rich_text> command. For example, we can search for the SMB vulnerability we identified previously.

We can use it by copying the full name of it and using </rich_text>
      <rich_text family="monospace">USE</rich_text>
      <rich_text> to use it:

Before we can run the exploit, we need to configure its options. To view the options available to configure, we can use the </rich_text>
      <rich_text family="monospace">show options</rich_text>
      <rich_text> command:Any option with </rich_text>
      <rich_text family="monospace">Required</rich_text>
      <rich_text> set to </rich_text>
      <rich_text family="monospace">yes</rich_text>
      <rich_text> needs to be set for the exploit to work. In this case, we only have to options to set: </rich_text>
      <rich_text family="monospace">RHOSTS</rich_text>
      <rich_text>, which means the IP of our target (this can be one IP, multiple IPs, or a file containing a list of IPs). We can set them with the </rich_text>
      <rich_text family="monospace">set</rich_text>
      <rich_text> command:
Once we have both options set, we can start the exploitation.  However, before we run the script, we can run a check to ensure the  server is vulnerable:
As we can see, the server is indeed vulnerable. Note that not every exploit in the </rich_text>
      <rich_text family="monospace">Metasploit Framework</rich_text>
      <rich_text> supports the </rich_text>
      <rich_text family="monospace">check</rich_text>
      <rich_text> function. Finally, we can use the </rich_text>
      <rich_text family="monospace">run</rich_text>
      <rich_text> or </rich_text>
      <rich_text family="monospace">exploit</rich_text>
      <rich_text> command to run the exploit:
</rich_text>
    </node>
    <node name="Burpsuite" unique_id="9" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646792592" ts_lastsave="1646792592"/>
    <node name="Netcat" unique_id="10" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646792604" ts_lastsave="1646792604"/>
    <node name="Gobuster" unique_id="12" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646792808" ts_lastsave="1646793458">
      <rich_text>Most of the time you will be using the command:

gobuster dir 

Some of the examples show how to use this option.
1. gobuster dir -u https://www.geeksforgeeks.org/
2. gobuster dir -u https://www.webscantest.com
3. gobuster dir -u 192.168.21.154


</rich_text>
      <rich_text scale="h3">Wordlist Specification</rich_text>
      <rich_text>
Gobuster Tool enumerates hidden  directories and files in the target domain by performing a brute-force  attack. A brute-force attack consists of matching a list of words or a  combination of words hoping that the correct term is present in the  list. So, Gobuster performs a brute attack. To force an attack, we need  to specify a collection of words, i.e., wordlist. So to provide this  wordlist, you need to type the “-w” option, followed by the path of the  wordlist where it is located. We can use a wordlist file that is already  present in the system.
gobuster dir -u https://www.geeksforgeeks.org/ -w /usr/share/wordlists/big.txt


</rich_text>
      <rich_text scale="h3">Enumerating Files</rich_text>
      <rich_text>
Gobuster Tool can enumerate hidden files  along with the remote directories. Gobuster allows us to use the “-x”  option followed by the file extensions you’d like to search for.
Consider the example below:
gobuster dir -u https://www.geeksforgeeks.com w /usr/share/wordlists/big.txt -x php,html,htm
In this command, we are specifically searching for files that have php,htm or html extensions.

</rich_text>
    </node>
    <node name="John" unique_id="13" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646792815" ts_lastsave="1646792821"/>
    <node name="dirb" unique_id="19" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646809249" ts_lastsave="1646809249"/>
    <node name="ffuf" unique_id="22" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646812334" ts_lastsave="1646812542">
      <rich_text family="monospace">ffuf</rich_text>
      <rich_text> is an acronym for “fuzz faster you fool!”, and it’s  a cli-based web attack tool written in Go. Veteran web testers might  think of it as Burp Intruder on the command line.
The hardest thing about </rich_text>
      <rich_text family="monospace">ffuf</rich_text>
      <rich_text> is figuring out how to pronounce it. 

 It’s just “fluff”, without the “l”.
Once you get the main concept, it’s brilliantly simple. Basically, you have two things:
1. The input file you’re sending to the web app, and
2. The location that’s being injected, indicated by the word </rich_text>
      <rich_text family="monospace">FUZZ</rich_text>
      <rich_text>
From there, you just line up exactly what you want to attack using which list, which pairs really well with </rich_text>
      <rich_text link="webs https://github.com/danielmiessler/SecLists">Seclists</rich_text>
      <rich_text> for picking stuff to send.


</rich_text>
      <rich_text scale="h2">Examples</rich_text>
      <rich_text>
The tool is extremely intuitive to use. Here we’re just supplying a wordlist with </rich_text>
      <rich_text family="monospace">-w</rich_text>
      <rich_text>, adding colored output for interesting stuff with </rich_text>
      <rich_text family="monospace">-c</rich_text>
      <rich_text>, and we’re sending our list against the root of the site where the </rich_text>
      <rich_text family="monospace">FUZZ</rich_text>
      <rich_text> string is.

</rich_text>
      <rich_text scale="h3">1. Find pages or files in the root of a site</rich_text>
      <rich_text>
ffuf -c -w /path/to/list -u https://tesla.com/FUZZ

</rich_text>
      <rich_text scale="h3">2. Find commonly-disallowed paths on your target using RobotsDisallowed</rich_text>
      <rich_text>
The </rich_text>
      <rich_text family="monospace">curated.txt</rich_text>
      <rich_text>  list within RobotsDisallowed filters the top 10,000 most commonly  disallowed paths for sensitive words, such as user, admin, password,  login, etc., which means if you get a hit you have a higher chance of  finding something interesting.

ffuf -c -w /path/to/curated.txt -u https://tesla.com/FUZZ


</rich_text>
      <rich_text scale="h3">3. Directory discovery a la dirbuster</rich_text>
      <rich_text>
Tools like this are so flexible that they can replace the need for others that only do one thing.
            
            
Using this same method, you can emulate the functionality of tools like Dirbuster.

ffuf -c -w /path/to/directories.txt -u https://tesla.com/FUZZ

</rich_text>
      <rich_text scale="h3">4. Attacking GET parameter names</rich_text>
      <rich_text>
Remember, you can throw stuff at any part of the site you define, and that includes GET parameters.
ffuf -c -w /path/to/parameters.txt -u https://target/script.php?FUZZ=test_value
Here  we’re fuzzing the name of the parameter, for example to see if you can  provide a parameter that you haven’t seen yet but will still work. But  you can also attack the value of a parameter that you have the name of.

</rich_text>
      <rich_text scale="h3">5. Attacking GET parameter values</rich_text>
      <rich_text>
If already have the name of a parameter you want to attack, just move the </rich_text>
      <rich_text family="monospace">FUZZ</rich_text>
      <rich_text> value.
ffuf -c -w /path/to/parameters.txt -u https://target/script.php?valid_name=FUZZ

</rich_text>
      <rich_text scale="h3">6. Guessing passwords by attacking POST data</rich_text>
      <rich_text>
How many tools have we emulated so far? Four?
Now we’re checking usernames and passwords, using the same tool. That’s flexibility!
ffuf -c -w /path/to/passwords.txt -X POST -d “username=admin\&amp;password=FUZZ“ -u https://target/login.php
</rich_text>
    </node>
    <node name="Hydra" unique_id="30" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1648596088" ts_lastsave="1657949931">
      <rich_text>
</rich_text>
      <rich_text scale="h3">RDP</rich_text>
      <rich_text>
To set the scene I have a Windows 2012 server with Remote  Desktop setup, running in my virtual lab. The virtual machine has an IP  of 192.168.34.16 and one user called administrator.
So lets fire up hydra with our rockyou word list and run this command
hydra -t 4 -V -f -l administrator -P rockyou.txt rdp://192.168.34.16</rich_text>
      <rich_text weight="heavy">-t 4</rich_text>
      <rich_text>  This sets the number of tasks that can run parallel together in this  example I have used 4 which will send 4 logins at a time. RDP does not  like too many connections at the same time so try and keep it at a  maximum of 4. It is sometimes worth adding a -w to your command to add a  wait between attempts.
</rich_text>
      <rich_text weight="heavy">-V</rich_text>
      <rich_text> – Verbose this shows you which usernames and passwords on screen as it’s working.
</rich_text>
      <rich_text weight="heavy">-f </rich_text>
      <rich_text> Quits once you have found a positive Username and Password match.
</rich_text>
      <rich_text weight="heavy">-l administrator</rich_text>
      <rich_text> – Use the username administrator to attempt to login.
</rich_text>
      <rich_text weight="heavy">-P rockyou.txt</rich_text>
      <rich_text>– This is the word list that we will be pulling passwords from.
</rich_text>
      <rich_text weight="heavy">rdp://192.168.34.16</rich_text>
      <rich_text> – This is the service we want to attack and the IP address.

WEB 

Let’s break down the commands:
• </rich_text>
      <rich_text weight="heavy">l &lt;username&gt;</rich_text>
      <rich_text> : is a word containing username account, use -L &lt;FILE&gt; to refer list of possible user name in a file.
• </rich_text>
      <rich_text weight="heavy">P &lt;FILE&gt;</rich_text>
      <rich_text> : is a file list of possible password, use -p &lt;password&gt; to literally use one word password instead of guess it.
• </rich_text>
      <rich_text weight="heavy">testapp.vunlwebapp.com</rich_text>
      <rich_text> : is a hostname or target
• </rich_text>
      <rich_text weight="heavy">http-post-form</rich_text>
      <rich_text> : is the service module we use
• </rich_text>
      <rich_text weight="heavy">“/Login.asp?RetURL=%2FDefault%2Easp%3F:tfUName=^USER^&amp;tfUPass=^PASS^:S=logout”</rich_text>
      <rich_text> = the 3 parameters needed, the syntax is :
{page URL}:{Request post body form parameters}:S={Find whatever in the page after succesfully logged in}
• </rich_text>
      <rich_text weight="heavy">v</rich_text>
      <rich_text> = Verbose mode
• </rich_text>
      <rich_text weight="heavy">V</rich_text>
      <rich_text> = show login:pass for each attempt
• </rich_text>
      <rich_text weight="heavy">f</rich_text>
      <rich_text> = Terminate program if pair login:password is found

hydra -l admin -P /usr/share/wordlists/rockyou.txt testasp.vulnweb.com http-post-form "/Login.asp?RetURL=%2FDefault%2Easp%3F:tfUName=^USER^&amp;tfUPass=^PASS^:S=logout" -vV -f

hydra -l admin -P /usr/share/wordlists/rockyou.txt 10.10.139.107 http-post-form '/admin/:user=^USER^&amp;pass=^PASS^&amp;Login=Login:Username or password invalid' 


</rich_text>
      <rich_text family="monospace" background="#e6e6e6e6fafa" foreground="#000000000000">hydra -L users.txt -P passwords.txt ssh://172.16.1.102 -t 4</rich_text>
      <rich_text>
</rich_text>
    </node>
    <node name="Nikto" unique_id="37" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1649621660" ts_lastsave="1649621664"/>
    <node name="Filezilla" unique_id="39" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1649621700" ts_lastsave="1649621700"/>
    <node name="Wireshark" unique_id="40" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1649621706" ts_lastsave="1649621706"/>
    <node name="Wfuzz" unique_id="58" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656617786" ts_lastsave="1656617786"/>
  </node>
  <node name="Python" unique_id="70" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1660507761" ts_lastsave="1661741838">
    <node name="Print" unique_id="71" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1660507798" ts_lastsave="1661726564">
      <rich_text>Computer programs consist of </rich_text>
      <rich_text style="italic">commands</rich_text>
      <rich_text>, each command  instructing the computer to take some action. A computer executes these  commands one by one. Among other things, commands can be used to perform  calculations, compare things in the computer's memory, cause changes in  how the program functions, relay messages or ask for information from  the program's user.
Let's begin programming by getting familiar with the </rich_text>
      <rich_text family="monospace">print</rich_text>
      <rich_text> command, which </rich_text>
      <rich_text style="italic">prints</rich_text>
      <rich_text> text. In this context, printing essentially means that the program will show some text on the screen. Printing with quotes in known as </rich_text>
      <rich_text style="italic" weight="heavy">strings</rich_text>
      <rich_text>. 

The following program will print the line "Hi there!":
</rich_text>
      <rich_text family="monospace">print("Hi there!")</rich_text>
      <rich_text>
When the program is run, it produces this:
Sample output
Hi there!

The  program will not work unless the code is written exactly as it is  above. For example, trying to run the print command without the  quotation marks, like so
</rich_text>
      <rich_text family="monospace">print(Hi there!)</rich_text>
      <rich_text>
will not print out the message, but instead causes an error:
Sample output
File "", line 1
  print(Hi there!)
                   ^
SyntaxError: invalid syntax

In summary, if you want to print text, the  text must all be encased in quotation marks or Python will not interpret  it correctly.
You can also put arithmetic operations inside a </rich_text>
      <rich_text family="monospace">print</rich_text>
      <rich_text> command. Running it will then print out the result of the operation. For example, the following program
</rich_text>
      <rich_text family="monospace">print(2 + 5)
print(3 * 3)
print(2 + 2 * 10)</rich_text>
      <rich_text>
prints out these lines:
Sample output
7 
9 
22

Notice the lack of quotation marks around the arithmetic operations above. Quotation marks are used to signify </rich_text>
      <rich_text style="italic">strings</rich_text>
      <rich_text>.  In the context of programming, strings are sequences of characters.  They can consist of letters, numbers and any other types of characters,  such as punctuation. Strings aren't just words as we commonly understand  them, but instead a single string can be as long as multiple complete  sentences. Strings are usually printed out exactly as they are written. Thus, the  following two commands produce two quite different results:
</rich_text>
      <rich_text family="monospace">print(2 + 2 * 10)
print("2 + 2 * 10")</rich_text>
      <rich_text>
This program prints out:
Sample output
22 2 + 2 * 10


To Print several lines you can include string in 3 quotations marks “”" or \n will create a new line. Also doing print(), an empty print command will create a new line.

</rich_text>
      <rich_text scale="h2" weight="heavy">F string</rich_text>
      <rich_text>

</rich_text>
      <rich_text family="monospace">&gt;&gt;&gt; name = "Eric"
&gt;&gt;&gt; age = 74
&gt;&gt;&gt; f"Hello, {name}. You are {age}."
'Hello, Eric. You are 74.'
</rich_text>
      <rich_text>
F strings are a way of not having to change the data types to make variables fit into a statement or a string. Instead of having to type str() or int() or float() each time there is a change, you can list variables and use f string.

</rich_text>
      <rich_text background="#f9f9f0f06b6b" foreground="#000000000000">age = input("What is your current age?")

days = 32850 - int(age) * 365  
weeks = 4680 - int(age) * 52   
months = 1080 - int(age) * 12 

print(f"You have {days} days, {weeks} weeks, and {months} months left.")</rich_text>
      <rich_text>


</rich_text>
      <rich_text scale="h2">Printing with f-strings</rich_text>
      <rich_text>
What if we want to have more flexibility and control over what we print out? So called </rich_text>
      <rich_text style="italic">f-strings</rich_text>
      <rich_text>  are another way of formatting printouts in Python. The syntax can  initially look a bit confusing, but in the end f-strings are often the  simplest way of formatting text.
With f-strings the previous example would look like this:

</rich_text>
      <rich_text family="monospace">result = 10 * 25
print(f"The result is {result}")</rich_text>
      <rich_text>

Let's break this apart. In the very beginning of the string we are printing out there is the character </rich_text>
      <rich_text style="italic">f</rich_text>
      <rich_text>. This tells Python that what follows is an f-string. Within the string, enclosed in curly brackets, is the variable name </rich_text>
      <rich_text family="monospace">result</rich_text>
      <rich_text>. The value it contains becomes a part of the printed string. The printout is exactly the same as in the previous examples:
Sample output

The result is 250


A single f-string can contain multiple variables. For example this code
</rich_text>
      <rich_text family="monospace">name = "Mark"
age = 37
city = "Palo Alto"
print(f"Hi {name}, you are {age} years old. You live in {city}.")</rich_text>
      <rich_text>
prints out this:

Hi Mark, you are 37 years old. You live in Palo Alto.


It is difficult to create a printout exactly like this using the comma notation in the </rich_text>
      <rich_text family="monospace">print</rich_text>
      <rich_text> command. For example, this program
</rich_text>
      <rich_text family="monospace">name = "Mark"
age = 37
city = "Palo Alto"
print("Hi", name, ", you are", age, "years old. You live in", city, ".")</rich_text>
      <rich_text>
prints out the following:

Hi Mark , you are 37 years old. You live in Palo Alto .


Notice the automatically inserted whitespace between each comma-separated part of the printout. Preventing </rich_text>
      <rich_text family="monospace">print</rich_text>
      <rich_text> from adding the extra spaces is technically possible, but not worth the trouble given that we can instead use f-strings.
In its simplicity the comma notation of the </rich_text>
      <rich_text family="monospace">print</rich_text>
      <rich_text>  command can often be useful, but it does sometimes cause more trouble  than it's worth. F-strings are usually a more reliable option. 	

Each </rich_text>
      <rich_text family="monospace">print</rich_text>
      <rich_text> command usually prints out a line of its own, complete with a change of line at the end. However, if the </rich_text>
      <rich_text family="monospace">print</rich_text>
      <rich_text> command is given an additional argument </rich_text>
      <rich_text family="monospace">end = ""</rich_text>
      <rich_text>, it will not print a line change.
For example:
</rich_text>
      <rich_text family="monospace">print("Hi ", end="")
print("there!")</rich_text>
      <rich_text>

Hi there!


</rich_text>
    </node>
    <node name="Input" unique_id="72" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1660508151" ts_lastsave="1660712193">
      <rich_text scale="h1">Input () function</rich_text>
      <rich_text>
input("a prompt for the user")


</rich_text>
      <rich_text style="italic">Input</rich_text>
      <rich_text> refers to any information a user gives to the program. Specifically, the Python command </rich_text>
      <rich_text family="monospace">input</rich_text>
      <rich_text>  reads in a line of input typed in by the user. It may also be used to  display a message to the user, to prompt for specific input. The program pauses while waiting for the user to provide input.
The following program reads in the name of the user with the </rich_text>
      <rich_text family="monospace">input</rich_text>
      <rich_text> command. It then prints it out with the </rich_text>
      <rich_text family="monospace">print</rich_text>
      <rich_text> command:

</rich_text>
      <rich_text family="monospace">name = input("What is your name? ")
print("Hi there, " + name)</rich_text>
      <rich_text>

The word </rich_text>
      <rich_text family="monospace">name</rich_text>
      <rich_text> in this program is a </rich_text>
      <rich_text style="italic">variable</rich_text>
      <rich_text>. In the context of programming, a variable is a location for storing some </rich_text>
      <rich_text style="italic">value</rich_text>
      <rich_text>, such as a string or a number. This value can be used later, and it can also be changed.

name = </rich_text>
      <rich_text foreground="#0000ff">input</rich_text>
      <rich_text>(</rich_text>
      <rich_text foreground="#a31515">'What is your name?'</rich_text>
      <rich_text>)
</rich_text>
      <rich_text foreground="#0000ff">print</rich_text>
      <rich_text>(name)
</rich_text>
      <rich_text foreground="#0000ff">print</rich_text>
      <rich_text>(name)

Strings and variables can be combined quite freely:
</rich_text>
      <rich_text family="monospace">name = input("What is your name? ")

print("Hi " + name + "! Let me make sure: your name is " + name + "?")</rich_text>
      <rich_text>
If the user gives the name </rich_text>
      <rich_text family="monospace">Ellen Example</rich_text>
      <rich_text> this prints out
Sample output
What is your name? </rich_text>
      <rich_text weight="heavy">Ellen Example</rich_text>
      <rich_text> Hi Ellen Example! Let me make sure: your name is Ellen Example?

\n moves the input cursor to the next line
</rich_text>
    </node>
    <node name="Variables" unique_id="74" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1660521560" ts_lastsave="1661707608">
      <rich_text>
Variables  are needed for various purposes in programming. You can use variables  to store any information that will be needed later in the program's  execution.
In Python programming variables are created like so:
</rich_text>
      <rich_text family="monospace">variable_name = ...</rich_text>
      <rich_text>
Here </rich_text>
      <rich_text family="monospace">...</rich_text>
      <rich_text> means the value stored in the variable.
For example, when you used the </rich_text>
      <rich_text family="monospace">input</rich_text>
      <rich_text> command to read a string from the user, you stored the string in a variable and then used the variable later in your program:
</rich_text>
      <rich_text family="monospace">name = input("What is your name? ")
print("Hi, " + name)</rich_text>
      <rich_text>


</rich_text>
      <rich_text scale="h2">Changing the value of a variable</rich_text>
      <rich_text>
As implied by the name </rich_text>
      <rich_text style="italic">variable</rich_text>
      <rich_text>, the value stored in a variable can change. In the previous section we noticed that the new value replaces the old one.
During the execution of the following program, the variable </rich_text>
      <rich_text family="monospace">word</rich_text>
      <rich_text> will have three different values:
</rich_text>
      <rich_text family="monospace">word = input("Please type in a word: ")
print(word)

word = input("And another word: ")
print(word)

word = "third"
print(word)</rich_text>
      <rich_text>
Sample output
Please type in a word: </rich_text>
      <rich_text weight="heavy">first</rich_text>
      <rich_text> first And another word: </rich_text>
      <rich_text weight="heavy">second</rich_text>
      <rich_text> second third


The value stored in the variable changes each time the variable is assigned a new value.
The new value of a variable can be derived from its old value. In the following example the variable </rich_text>
      <rich_text family="monospace">word</rich_text>
      <rich_text>  is first assigned a value based on user input. Then it is assigned a  new value, which is the old value with three exclamation marks added to  the end.
</rich_text>
      <rich_text family="monospace">word = input("Please type in a word: ")
print(word)

word = word + "!!!"
print(word)</rich_text>
      <rich_text>
Sample output
Please type in a word: </rich_text>
      <rich_text weight="heavy">test</rich_text>
      <rich_text> test test!!!



Name = Angela

A Python variable is </rich_text>
      <rich_text weight="heavy">a symbolic name that is a reference or pointer to an object</rich_text>
      <rich_text>. Once an object is assigned to a variable, you can refer to the object by that name.

Variables can be changed throughout a script.
eg:

name = "JP"

Make your code readable. Try to make sure that names of variables make sense.

Sometimes instead of creating new variables, you can alter code to simply include math in the code after the string.

</rich_text>
      <rich_text foreground="#008000"># Write your solution here</rich_text>
      <rich_text>
num1 = </rich_text>
      <rich_text foreground="#0000ff">int</rich_text>
      <rich_text>(</rich_text>
      <rich_text foreground="#0000ff">input</rich_text>
      <rich_text>(</rich_text>
      <rich_text foreground="#a31515">"Number 1:"</rich_text>
      <rich_text>))
num2 = </rich_text>
      <rich_text foreground="#0000ff">int</rich_text>
      <rich_text>(</rich_text>
      <rich_text foreground="#0000ff">input</rich_text>
      <rich_text>(</rich_text>
      <rich_text foreground="#a31515">"Number 2:"</rich_text>
      <rich_text>))
</rich_text>
      <rich_text foreground="#0000ff">sum</rich_text>
      <rich_text> = num1 + num2
product = num1 * num2
</rich_text>
      <rich_text foreground="#0000ff">print</rich_text>
      <rich_text>(</rich_text>
      <rich_text foreground="#a31515">"The sum of the numbers:"</rich_text>
      <rich_text>, num1 + num2)
</rich_text>
      <rich_text foreground="#0000ff">print</rich_text>
      <rich_text>(</rich_text>
      <rich_text foreground="#a31515">"The product of the numbers:"</rich_text>
      <rich_text>, num1 * num2)

Instead of using the new variables of sum and product, we can finish the string, add a comma and include the math which gives us the result instead of having to include a new variable.</rich_text>
    </node>
    <node name="Methods" unique_id="75" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1660747549" ts_lastsave="1660747750">
      <rich_text>quote = "Born alone die alone"

print(quote.upper()) #uppercase
print(quote.lower()) #lowercase
print(quote.title()) #titlecase
print(len(quote))

BORN ALONE DIE ALONE
born alone die alone
Born Alone Die Alone
20</rich_text>
    </node>
    <node name="Data Types" unique_id="76" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1661399691" ts_lastsave="1661705212">
      <rich_text>To find out what data type something is. You can enter print(type(''))

</rich_text>
      <rich_text underline="single" style="italic" scale="h2" weight="heavy">STRING</rich_text>
      <rich_text>

“Hello”

A string of characters, strings always have quotes around them.

Strings can be changed to an integer by using int()

example int(number)

first_digit = int(two_digit_number[0])
second_digit = int(two_digit_number[1])

</rich_text>
      <rich_text underline="single" style="italic" scale="h2" weight="heavy">INTEGER</rich_text>
      <rich_text>

Integers are numbers that do not have a  decimal or fractional part, such as </rich_text>
      <rich_text family="monospace">-15</rich_text>
      <rich_text>, </rich_text>
      <rich_text family="monospace">0</rich_text>
      <rich_text> and </rich_text>
      <rich_text family="monospace">1</rich_text>
      <rich_text>.
The following program creates the variable </rich_text>
      <rich_text family="monospace">age</rich_text>
      <rich_text>, which contains an integer value.
</rich_text>
      <rich_text background="#3d3d38384646">age = 24
print(age)

24</rich_text>
      <rich_text>


1234

Integers do not go in quotes. They are not strings. You  can change an integer into a string by using str(age)

Underscores can be used to make integers more readable. 365789111 could be 356_789_111

integers can be changed to strings by using str()

example str(1234)

If we do want to print out a string and an integer in a single command, the integer can be cast as a string with the </rich_text>
      <rich_text family="monospace">str</rich_text>
      <rich_text> function, and the two strings can then be combined normally. For example, this would work:
</rich_text>
      <rich_text family="monospace">result = 10 * 25
print("The result is " + str(result))</rich_text>
      <rich_text>
Sample output
The result is 250




</rich_text>
      <rich_text underline="single" style="italic" scale="h2" weight="heavy">FLOAT</rich_text>
      <rich_text>

</rich_text>
      <rich_text family="monospace">Floating point number</rich_text>
      <rich_text> or </rich_text>
      <rich_text style="italic">float</rich_text>
      <rich_text> is a term you will come across often in programming. It refers to numbers with a decimal point. They can be used much in the same way as integer values.

Floating point number. Decimal point can float around

3.14159

</rich_text>
      <rich_text underline="single" style="italic" scale="h2" weight="heavy">BOOLEAN</rich_text>
      <rich_text>

True
False

Values always begin with a Capital letter. No quotes.</rich_text>
    </node>
    <node name="Math" unique_id="77" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1661521090" ts_lastsave="1661707091">
      <rich_text justification="left"></rich_text>
      <rich_text>


3 + 5
3 - 5
3 * 5
3 / 5
2 ** 3 - Exponents

The order of operations is a rule that tells the correct sequence of steps for evaluating a math expression. We can remember the order using PEMDAS: </rich_text>
      <rich_text weight="heavy">Parentheses, Exponents, Multiplication and Division (from left to right), Addition and Subtraction (from left to right)</rich_text>
      <rich_text>

</rich_text>
      <rich_text weight="heavy">Round function</rich_text>
      <rich_text> will round to the nearest whole number. Can round to certain decimal points, example:

print(round(8 / 3, 2))

2.67

</rich_text>
      <rich_text weight="heavy">Floor division</rich_text>
      <rich_text> is when you use // instead of single / divide symbol which gives you an integer and a whole number instead of a float.

</rich_text>
      <rich_text weight="heavy">+=</rich_text>
      <rich_text> symbol or </rich_text>
      <rich_text weight="heavy">-=</rich_text>
      <rich_text> can be used to add or subtract to variables throughout code. Also works for multiplication and division.

</rich_text>
      <rich_text weight="heavy">Python Percentage</rich_text>
      <rich_text>
 To calculate a percentage in Python, </rich_text>
      <rich_text weight="heavy">use  the division operator (/) to get the quotient from two numbers and then  multiply this quotient by 100 using the multiplication operator (*) to  get the percentage</rich_text>
      <rich_text>
 
</rich_text>
      <rich_text scale="h2" weight="heavy"> TIP CALCULATOR EXAMPLE</rich_text>
      <rich_text>
 
 #If the bill was $150.00, split between 5 people, with 12% tip. 

#Each person should pay (150.00 / 5) * 1.12 = 33.6
#Format the result to 2 decimal places = 33.60

#Tip: There are 2 ways to round a number. You might have to do some Googling to solve this.💪

#Write your code below this line 👇

print("Welcome to the tip calculator!")
bill = float(input("What was the total bill? $"))
tip = int(input("How much tip would you like to give? 10, 12 or 15?"))
people = int(input("How many people to split to bill?"))

tip_as_percent = tip / 100
total_tip_amount = bill * tip_as_percent
total_bill = bill + total_tip_amount
split_bill = total_bill / people

print(f"Each person should pay: ${round(split_bill, 2)}")



Increasing the value of a variable is a very common operation. As  such, there is a commonly used shorthand notation which achieves the  same result as the explicit summing up above:
</rich_text>
      <rich_text family="monospace">sum += number</rich_text>
      <rich_text>
This allows us to write the above program a little more concisely:
</rich_text>
      <rich_text family="monospace">sum = 0

number = int(input("First number: "))
sum += number

number = int(input("Second number: "))
sum += number

number = int(input("Third number: "))
sum += number

print(f"The sum of the numbers: {sum}")</rich_text>
      <rich_text>
</rich_text>
      <table char_offset="0" justification="left" col_min="60" col_max="60" col_widths="0,0,0,0">
        <row>
          <cell>+</cell>
          <cell>Addition</cell>
          <cell>2 + 4</cell>
          <cell>6</cell>
        </row>
        <row>
          <cell>-</cell>
          <cell>Subtraction</cell>
          <cell>10 - 2.5</cell>
          <cell>7.5</cell>
        </row>
        <row>
          <cell>*</cell>
          <cell>Multiplication</cell>
          <cell>-2 * 123</cell>
          <cell>-246</cell>
        </row>
        <row>
          <cell>/</cell>
          <cell>Division (floating point result)</cell>
          <cell>9 / 2</cell>
          <cell>4.5</cell>
        </row>
        <row>
          <cell>//</cell>
          <cell>Division (integer result)</cell>
          <cell>9 // 2</cell>
          <cell>4</cell>
        </row>
        <row>
          <cell>%</cell>
          <cell>Modulo</cell>
          <cell>9 % 2</cell>
          <cell>1</cell>
        </row>
        <row>
          <cell>**</cell>
          <cell>Exponentiation</cell>
          <cell>2 ** 3</cell>
          <cell>8</cell>
        </row>
        <row>
          <cell>Operator</cell>
          <cell>Purpose</cell>
          <cell>Example</cell>
          <cell>Result</cell>
        </row>
      </table>
    </node>
    <node name="Functions" unique_id="78" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1661662456" ts_lastsave="1661662563">
      <rich_text scale="h1" weight="heavy">Round</rich_text>
      <rich_text>

The </rich_text>
      <rich_text family="monospace">round()</rich_text>
      <rich_text> function returns a floating  point number that is a rounded version of the specified number, with the  specified number of decimals.
The default number of decimals is 0, meaning that the function will return  the nearest integer.

</rich_text>
      <rich_text scale="h3">Example</rich_text>
      <rich_text>
  Round a number to only two decimals:
  </rich_text>
      <rich_text foreground="#ff0000"> </rich_text>
      <rich_text>    x = round(</rich_text>
      <rich_text foreground="#ff0000">5.76543</rich_text>
      <rich_text>, </rich_text>
      <rich_text foreground="#ff0000">2</rich_text>
      <rich_text>)
print(x) 

5.77

</rich_text>
    </node>
  </node>
  <node name="HTML" unique_id="79" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1661741838" ts_lastsave="1661918790">
    <rich_text link="webs https://www.hostinger.com/tutorials/what-is-html" weight="heavy">HTML</rich_text>
    <rich_text weight="heavy"> is a programming language that stands for Hypertext Markup Language.</rich_text>
    <rich_text scale="h3" foreground="#a9a297"> This is a relatively simplistic yet powerful programming language that allows web developers and website owners to create the structure of their websites. If you want a sentence in a blog post to receive a bold font, HTML could be used to achieve this. When using this system, any text files can be tagged for effects, graphics, fonts, or colors. If you’ve never used any kind of programming language in the past, HTML would be a great place to start. Keep in mind that HTML markups are enhanced by CSS and JavaScript, which is why it’s recommended that you learn this programming language first.</rich_text>
  </node>
  <node name="CSS" unique_id="80" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1661742086" ts_lastsave="1661742090"/>
  <node name="Javascript" unique_id="81" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1661742090" ts_lastsave="1661742090"/>
  <node name="HTTP" unique_id="61" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656780000" ts_lastsave="1656884127">
    <node name="Requests" unique_id="62" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656780004" ts_lastsave="1656780005">
      <rich_text>HTTP methods are a way for the client to show their intended action  when making an HTTP request. There are a lot of HTTP methods but we'll  cover the most common ones, although mostly you'll deal with the GET and  POST method.
</rich_text>
      <rich_text weight="heavy">GET Request</rich_text>
      <rich_text>
This is used for getting information from a web server.

</rich_text>
      <rich_text weight="heavy">POST Request</rich_text>
      <rich_text>
This is used for submitting data to the web server and potentially creating new records

</rich_text>
      <rich_text weight="heavy">PUT Request</rich_text>
      <rich_text>
This is used for submitting data to a web server to update information</rich_text>
      <rich_text weight="heavy">
</rich_text>
      <rich_text>
</rich_text>
      <rich_text weight="heavy">DELETE Request</rich_text>
      <rich_text>
This is used for deleting information/records from a web server.
</rich_text>
    </node>
    <node name="Status Codes" unique_id="63" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656780122" ts_lastsave="1656780137">
      <rich_text scale="h3" weight="heavy">HTTP Status Codes:</rich_text>
      <rich_text>In the  previous task, you learnt that when a HTTP server responds, the first  line always contains a status code informing the client of the outcome  of their request and also potentially how to handle it. These  status codes can be broken down into 5 different ranges:

</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>

</rich_text>
      <rich_text scale="h3" weight="heavy">Common HTTP Status Codes:</rich_text>
      <rich_text>

There  are a lot of different HTTP status codes and that's not including the  fact that applications can even define their own, we'll go over the most  common HTTP responses you are likely to come across:
</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>

</rich_text>
      <table char_offset="290" justification="left" col_min="60" col_max="60" col_widths="0,0">
        <row>
          <cell>200-299 - Success</cell>
          <cell>This range of status codes is used to tell the client their request was successful.</cell>
        </row>
        <row>
          <cell>300-399 - Redirection</cell>
          <cell>These are used to redirect the client's request to another resource. This can be either to a different webpage or a different website altogether.</cell>
        </row>
        <row>
          <cell>400-499 - Client Errors</cell>
          <cell>Used to inform the client that there was an error with their request.</cell>
        </row>
        <row>
          <cell>500-599 - Server Errors</cell>
          <cell>This is reserved for errors happening on the server-side and usually indicate quite a major problem with the server handling the request.</cell>
        </row>
        <row>
          <cell>100-199 - Information Response</cell>
          <cell>These are sent to tell the client the first part of their request has been accepted and they should continue sending the rest of their request. These codes are no longer very common.</cell>
        </row>
      </table>
      <table char_offset="525" justification="left" col_min="60" col_max="60" col_widths="0,0">
        <row>
          <cell>201 - Created</cell>
          <cell>A resource has been created (for example a new user or new blog post).</cell>
        </row>
        <row>
          <cell>301 - Permanent Redirect</cell>
          <cell>This redirects the client's browser to a new webpage or tells search engines that the page has moved somewhere else and to look there instead.</cell>
        </row>
        <row>
          <cell>302 - Temporary Redirect</cell>
          <cell>Similar to the above permanent redirect, but as the name suggests, this is only a temporary change and it may change again in the near future.</cell>
        </row>
        <row>
          <cell>400 - Bad Request</cell>
          <cell>This tells the browser that something was either wrong or missing in their request. This could sometimes be used if the web server resource that is being requested expected a certain parameter that the client didn't send.</cell>
        </row>
        <row>
          <cell>401 - Not Authorised</cell>
          <cell>You are not currently allowed to view this resource until you have authorised with the web application, most commonly with a username and password.</cell>
        </row>
        <row>
          <cell>403 - Forbidden</cell>
          <cell>You do not have permission to view this resource whether you are logged in or not.</cell>
        </row>
        <row>
          <cell>405 - Method Not Allowed</cell>
          <cell>The resource does not allow this method request, for example, you send a GET request to the resource /create-account when it was expecting a POST request instead.</cell>
        </row>
        <row>
          <cell>404 - Page Not Found</cell>
          <cell>The page/resource you requested does not exist.</cell>
        </row>
        <row>
          <cell>500 - Internal Service Error</cell>
          <cell>The server has encountered some kind of error with your request that it doesn't know how to handle properly.</cell>
        </row>
        <row>
          <cell>503 - Service Unavailable</cell>
          <cell>This server cannot handle your request as it's either overloaded or down for maintenance.</cell>
        </row>
        <row>
          <cell>200 - OK</cell>
          <cell>The request was completed successfully.</cell>
        </row>
      </table>
    </node>
    <node name="Headers" unique_id="64" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656780283" ts_lastsave="1656780434">
      <rich_text>Headers are additional bits of data you can send to the web server when making requests.
Although no headers are strictly required when making a HTTP request, you’ll find it difficult to view a website properly.</rich_text>
      <rich_text weight="heavy">
</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h3" weight="heavy">Common Request Headers</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h3">﻿These are headers that are sent from the client (usually your browser) to the server.</rich_text>
      <rich_text>

</rich_text>
      <rich_text weight="heavy">Host:</rich_text>
      <rich_text>  Some web servers host multiple websites so by providing the host  headers you can tell it which one you require, otherwise you'll just  receive the default website for the server.

</rich_text>
      <rich_text weight="heavy">User-Agent:</rich_text>
      <rich_text>  This is your browser software and version number, telling the web  server your browser software helps it format the website properly for  your browser and also some elements of HTML, JavaScript and CSS are only  available in certain browsers.

</rich_text>
      <rich_text weight="heavy">Content-Length:</rich_text>
      <rich_text> When  sending data to a web server such as in a form, the content length tells  the web server how much data to expect in the web request. This way the  server can ensure it isn't missing any data.

</rich_text>
      <rich_text weight="heavy">Accept-Encoding:</rich_text>
      <rich_text>  Tells the web server what types of compression methods the browser  supports so the data can be made smaller for transmitting over the  internet.

</rich_text>
      <rich_text weight="heavy">Cookie:</rich_text>
      <rich_text> Data sent to the server to help remember your information (see cookies task for more information).

</rich_text>
      <rich_text scale="h3" weight="heavy">Common Response Headers</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h3">These are the headers that are returned to the client from the server after a request.</rich_text>
      <rich_text scale="h3" weight="heavy">
</rich_text>
      <rich_text>
</rich_text>
      <rich_text weight="heavy">Set-Cookie:</rich_text>
      <rich_text> Information to store which gets sent back to the web server on each request (see cookies task for more information).

</rich_text>
      <rich_text weight="heavy">Cache-Control:</rich_text>
      <rich_text> How long to store the content of the response in the browser's cache before it requests it again.

</rich_text>
      <rich_text weight="heavy">Content-Type:</rich_text>
      <rich_text>  This tells the client what type of data is being returned, i.e., HTML,  CSS, JavaScript, Images, PDF, Video, etc. Using the content-type header  the browser then knows how to process the data.

</rich_text>
      <rich_text weight="heavy">Content-Encoding: </rich_text>
      <rich_text>What method has been used to compress the data to make it smaller when sending it over the internet.
</rich_text>
    </node>
    <node name="Cookies" unique_id="65" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656780496" ts_lastsave="1656780510">
      <rich_text>You've probably heard of cookies before, they're just a small piece of data that is stored on your computer. Cookies are saved when you receive a "Set-Cookie" header from a web server. Then every further request you make, you'll send the cookie data back to the web server. Because HTTP is stateless (doesn't keep track of your previous requests), cookies can be used to remind the web server who you are, some personal settings for the website or whether you've been to the website before. Let's take a look at this as an example HTTP request:</rich_text>
    </node>
  </node>
  <node name="Web" unique_id="66" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656884127" ts_lastsave="1656884132">
    <node name="Dev Tools" unique_id="67" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656884132" ts_lastsave="1656886187">
      <node name="Inspector" unique_id="68" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656884792" ts_lastsave="1656885962">
        <rich_text>The  page source doesn't always represent what's shown on a webpage; this is  because CSS, JavaScript and user interaction can change the content and  style of the page, which means we need a way to view what's been  displayed in the browser window at this exact time. Element inspector  assists us with this by providing us with a live representation of what  is currently on the website.
</rich_text>
      </node>
      <node name="Debugger" unique_id="69" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656886187" ts_lastsave="1656886189">
        <rich_text>This  panel in the developer tools is intended for debugging JavaScript, and  again is an excellent feature for web developers wanting to work out why  something might not be working. But as penetration testers, it gives us  the option of digging deep into the JavaScript code. In Firefox and  Safari, this feature is called Debugger, but in Google Chrome, it's  called Sources.
</rich_text>
      </node>
    </node>
  </node>
  <node name="Windows" unique_id="14" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646792880" ts_lastsave="1647299384">
    <node name="Samba" unique_id="27" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1647299384" ts_lastsave="1647299400">
      <rich_text>Samba is a free software re-implementation of the SMB networking  protocol, and was originally developed by Andrew Tridgell. Samba  provides file and print services for various Microsoft Windows clients  and can integrate with a Microsoft Windows Server domain, either as a  Domain Controller or as a domain member</rich_text>
    </node>
  </node>
  <node name="PrivEsc" unique_id="11" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646792755" ts_lastsave="1648748755">
    <rich_text link="webs https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md#linux---privilege-escalation">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md#linux---privilege-escalation</rich_text>
    <rich_text> - Master checklist
</rich_text>
    <rich_text link="webs https://payatu.com/guide-linux-privilege-escalation">https://payatu.com/guide-linux-privilege-escalation</rich_text>
    <rich_text> - Guide to privEsc
</rich_text>
    <rich_text link="webs https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/">https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/</rich_text>
    <rich_text> - Terminal commands for PrivEsc
</rich_text>
    <rich_text link="webs https://gtfobins.github.io/">https://gtfobins.github.io/</rich_text>
    <rich_text> - GTFOBins is a curated list of Unix binaries that can be used to bypass local security restrictions in misconfigured systems.


Privilege escalation means users receive privileges they are not  entitled to. These privileges can be used to delete files, view private  information, or install unwanted programs such as viruses. It usually  occurs when a system has a </rich_text>
    <rich_text link="webs https://en.wikipedia.org/wiki/Software_bug">bug</rich_text>
    <rich_text>  that allows security to be bypassed or, alternatively, has flawed  design assumptions about how it will be used.  Privilege escalation  occurs in two forms: 
• </rich_text>
    <rich_text weight="heavy">Vertical privilege escalation</rich_text>
    <rich_text>, also known as </rich_text>
    <rich_text style="italic">privilege elevation</rich_text>
    <rich_text>, where a lower privilege user or application accesses functions or content reserved for higher privilege users or applications (e.g. Internet Banking users can access site administrative functions or the password for a smartphone can be bypassed.)
• </rich_text>
    <rich_text weight="heavy">Horizontal privilege escalation</rich_text>
    <rich_text>, where a normal user accesses functions or content reserved for other normal users (e.g. Internet Banking User A accesses the Internet bank account of User B)

</rich_text>
    <node name="Shell Upgrades" unique_id="31" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1648748755" ts_lastsave="1651297478">
      <rich_text link="webs http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</rich_text>
      <rich_text>

</rich_text>
      <node name="Netcat" unique_id="32" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1648748763" ts_lastsave="1648996983">
        <rich_text family="monospace">python -c 'import pty;pty.spawn("/bin/bash")';</rich_text>
        <rich_text>   -Python bash shell</rich_text>
      </node>
      <node name="SSH" unique_id="33" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1648748769" ts_lastsave="1648748769"/>
      <node name="FTP" unique_id="34" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1648748773" ts_lastsave="1648748773"/>
    </node>
  </node>
  <node name="OSINT" unique_id="28" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1648129458" ts_lastsave="1655313551">
    <rich_text weight="heavy"> USERNAMES</rich_text>
    <rich_text> - Sites, such as </rich_text>
    <rich_text link="webs https://namechk.com/">https://namechk.com/</rich_text>
    <rich_text>, </rich_text>
    <rich_text link="webs https://whatsmyname.app/">https://whatsmyname.app/</rich_text>
    <rich_text>  and </rich_text>
    <rich_text link="webs https://namecheckup.com/">https://namecheckup.com/</rich_text>
    <rich_text> will identify other possible accounts quickly for us.  Tools, such as </rich_text>
    <rich_text link="webs https://github.com/WebBreacher/WhatsMyName">https://github.com/WebBreacher/WhatsMyName</rich_text>
    <rich_text> and </rich_text>
    <rich_text link="webs https://github.com/sherlock-project/sherlock">https://github.com/sherlock-project/sherlock</rich_text>
    <rich_text> do this as well.  Simply enter a username, hit search, and comb through the results.  It's that easy!
 
 </rich_text>
    <rich_text link="webs https://wigle.net/">https://wigle.net/</rich_text>
    <rich_text> - Maps of wireless networks
 </rich_text>
    <rich_text link="webs https://lookup.icann.org/en">https://lookup.icann.org/en</rich_text>
    <rich_text> - Whois, company info on servers
 
</rich_text>
    <rich_text underline="single" scale="h1" weight="heavy">EMAIL</rich_text>
    <rich_text scale="h1"> </rich_text>
    <rich_text>

</rich_text>
    <rich_text link="webs https://nixintel.info/osint/12-osint-resources-for-e-mail-addresses/">https://nixintel.info/osint/12-osint-resources-for-e-mail-addresses/</rich_text>
    <rich_text> - 12 OSINT Resources For E-mail Addresses

 
</rich_text>
    <rich_text underline="single" scale="h2" weight="heavy"> WHOIS</rich_text>
    <rich_text>
 
 We can confirm current registration status with a whois lookup.
A 'whois' lookup is the most basic form of domain recon available. There are multiple websites that will do it for you as well.
Personally, I recommend just going directly to </rich_text>
    <rich_text link="webs https://lookup.icann.org/lookup">lookup.icann.org</rich_text>
    <rich_text>.  This should tell you the current hosting company used and name servers.  Looking at the raw data option will show further details.
We're  looking for any data we might be able to use as pivot points. Maybe an  email address? Or better yet, a physical address or phone number?
</rich_text>
    <rich_text style="italic" weight="heavy">Technically</rich_text>
    <rich_text>  these are required in order to register any domain, but most domain  registrars offer some kind of privacy protection for a trivial fee, if  not free.

</rich_text>
    <rich_text underline="single" scale="h1" weight="heavy">DNS</rich_text>
    <rich_text>

ViewDNS.info provides a convenient UI for looking up registration information on a target website. Using this information, it may be possible to draw certain conclusions that are not clearly spelled out, such as whether the website is hosted on a shared or dedicated IP address. The answer to this question can imply things about the website's budget as well as traffic.

</rich_text>
    <rich_text underline="single" scale="h1" weight="heavy">IP</rich_text>
    <rich_text>

nslookup is a network administration command-line tool for  querying the Domain Name System to obtain the mapping between domain  name and IP address, or other DNS records
</rich_text>
    <rich_text link="webs https://www.digwebinterface.com/">https://www.digwebinterface.com/</rich_text>
    <rich_text>
dnsdumpster.com

</rich_text>
    <node name="Images" unique_id="47" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1654708402" ts_lastsave="1654708489">
      <rich_text>Metadata/Exif - </rich_text>
      <rich_text link="webs https://exiftool.org/">https://exiftool.org/</rich_text>
      <rich_text>
</rich_text>
      <rich_text link="webs https://www.dcode.fr/exif-data">https://www.dcode.fr/exif-data</rich_text>
      <rich_text>
</rich_text>
    </node>
  </node>
  <node name="Web Applications" unique_id="4" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646792493" ts_lastsave="1656650592">
    <rich_text>A web application is like a “program” that we can use without  installation as long as we have a modern standard web browser, such as  Firefox, Safari, or Chrome. Consequently, instead of installing every  program you need, you only need to browse the related page. The  following are some examples of web applications:
• Webmail such as Tutanota, Protonmail, Outlook, and Gmail
• Online office suites such as Microsoft Office 365 (Word, Excel, and PowerPoint), Google Drive (Docs, Sheets, and Slides), and Zoho Office (Writer, Sheet, and Show)
• Online shopping such as Amazon.com, AliExpress, and Etsy

Thousands more examples provide a myriad of services. Other examples  include online banking, money transfer, weather forecast, and social  media.

</rich_text>
    <rich_text link="webs https://github.com/OWASP/wstg">https://github.com/OWASP/wstg</rich_text>
    <rich_text> - OWASP web security testing guide
</rich_text>
    <rich_text link="webs https://owasp.org/www-project-top-ten/">https://owasp.org/www-project-top-ten/</rich_text>
    <rich_text> - OWASP Top 10
</rich_text>
    <rich_text family="monospace">Whatweb</rich_text>
    <rich_text> is a handy tool and contains much functionality to automate web application enumeration across a network.

</rich_text>
    <rich_text underline="single" scale="h2" weight="heavy">COMMON WEB ATTACKS</rich_text>
    <rich_text>

</rich_text>
    <rich_text underline="single" weight="heavy">Sql injection</rich_text>
    <rich_text> - SQL injection, also known as SQLI, is </rich_text>
    <rich_text weight="heavy">a  common attack vector that uses malicious SQL code for backend database  manipulation to access information that was not intended to be displayed</rich_text>
    <rich_text>. This information may include any number of items, including sensitive company data, user lists or private customer details.
</rich_text>
    <rich_text underline="single" weight="heavy">File inclusion</rich_text>
    <rich_text> - Remote File Inclusion (RFI)  and Local File Inclusion (LFI) are vulnerabilities that are often found  in poorly-written web applications. These vulnerabilities occur </rich_text>
    <rich_text weight="heavy">when a web application allows the user to submit input into files or upload files to the server</rich_text>
    <rich_text>.
</rich_text>
    <rich_text underline="single" weight="heavy">Unrestricted File Upload</rich_text>
    <rich_text> - What is an Unrestricted File Upload Vulnerability? </rich_text>
    <rich_text weight="heavy">A local file upload vulnerability where an application fails to verify the contents of an uploaded file</rich_text>
    <rich_text>, allows an attacker to upload a malicious file to the web server or application.
</rich_text>
    <rich_text underline="single" weight="heavy">IDOR</rich_text>
    <rich_text> - Insecure Direct Object  References (IDOR) occur when an application provides direct access to  objects based on user-supplied input. As a result of this vulnerability  attackers can bypass authorization and access resources in the system  directly, for example </rich_text>
    <rich_text weight="heavy">database records or files</rich_text>
    <rich_text>.
</rich_text>
    <rich_text underline="single" weight="heavy">Broken Access Control</rich_text>
    <rich_text> - What is Broken Access Control? Access control </rich_text>
    <rich_text weight="heavy">enforces policy such that users cannot act outside of their intended permissions</rich_text>
    <rich_text>.  Failures typically lead to unauthorized information disclosure,  modification or destruction of all data, or performing a business  function outside of the limits of the user.

</rich_text>
    <rich_text underline="single" scale="h2" weight="heavy">HTTP STATUS CODES</rich_text>
    <rich_text>

• </rich_text>
    <rich_text style="italic">1xx informational response</rich_text>
    <rich_text> – the request was received, continuing process
• </rich_text>
    <rich_text style="italic">2xx successful</rich_text>
    <rich_text> – the request was successfully received, understood, and accepted
• </rich_text>
    <rich_text style="italic">3xx redirection</rich_text>
    <rich_text> – further action needs to be taken in order to complete the request
• </rich_text>
    <rich_text style="italic">4xx client error</rich_text>
    <rich_text> – the request contains bad syntax or cannot be fulfilled
• </rich_text>
    <rich_text style="italic">5xx server error</rich_text>
    <rich_text> – the server failed to fulfil an apparently valid request




</rich_text>
    <node name="Google Dorking" unique_id="18" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646808205" ts_lastsave="1646808210">
      <rich_text link="webs https://www.exploit-db.com/google-hacking-database">https://www.exploit-db.com/google-hacking-database</rich_text>
      <rich_text>
</rich_text>
    </node>
    <node name="Subdomain Enumeration" unique_id="20" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646809827" ts_lastsave="1656603617">
      <rich_text>Sub-domain enumeration is the process of finding sub-domainsfor one or more domains.It helps to broader the attack surface,find hidden applications,and forgotten subdomains. Can use dirbuster, gobuster and ffuf

</rich_text>
      <rich_text link="webs https://0xpatrik.com/subdomain-enumeration-2019/">https://0xpatrik.com/subdomain-enumeration-2019/</rich_text>
      <rich_text>


</rich_text>
      <rich_text scale="h2">Brute Force Enumeration </rich_text>
      <rich_text link="webs https://0xffsec.com/handbook/information-gathering/subdomain-enumeration/#brute-force-enumeration" scale="h2">#</rich_text>
      <rich_text>
Useful Wordlists:
• Jhaddix’s </rich_text>
      <rich_text link="webs https://gist.github.com/jhaddix/86a06c5dc309d08580a018c66354a056">all.txt</rich_text>
      <rich_text>
• Daniel Miessler’s </rich_text>
      <rich_text link="webs https://github.com/danielmiessler/SecLists/tree/master/Discovery/DNS">DNS Discovery</rich_text>
      <rich_text>.
• </rich_text>
      <rich_text link="webs https://github.com/assetnote/commonspeak2-wordlists">Commonspeak2</rich_text>
      <rich_text>
• Seclists
• 

Can use tool called DNS Recon - </rich_text>
      <rich_text link="webs https://github.com/darkoperator/dnsrecon">https://github.com/darkoperator/dnsrecon</rich_text>
      <rich_text>
</rich_text>
      <rich_text link="webs https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</rich_text>
      <rich_text> - Sublist3r is a tool for fast subdomains enumeration tool for penetration testers


</rich_text>
      <rich_text scale="h3">Subdomain Bruteforcing with all.txt</rich_text>
      <rich_text>
</rich_text>
      <rich_text family="monospace">#https://gist.github.com/jhaddix/86a06c5dc309d08580a018c66354a056

todo - As there is a few methods to talk about here but the best wordlists is Jason Haddix's all.txt

dnsrecon -d paypal.com -D all.txt -t brt

#Fastest is Probably SubBrute.py
python $Tools/subbrute/subbrute.py paypal.com paypal.co.uk -t all.txt 


#Final method is using GoBuster which is also v fast
gobuster dns -d paypal.com -w all.txt</rich_text>
      <rich_text>

</rich_text>
      <rich_text scale="h2" weight="heavy">DONT FORGET ROBOTS.TXT</rich_text>
      <rich_text>


</rich_text>
      <rich_text scale="h2">OSINT </rich_text>
      <rich_text scale="h2" weight="heavy">Enumeration</rich_text>
      <rich_text> (Open Source Intelligence)
When SSL or TSL certificate is created by a CA (Certificate Authority), this information is logged on a public database. Check for these on </rich_text>
      <rich_text link="webs https://crt.sh/">https://crt.sh/</rich_text>
      <rich_text> and possibly discover subdomains.

Also can do this through search engines and google dorking. Searching for site:www.domain.com site:*.domain.com is a script that will contain subdomains on given site.

</rich_text>
      <rich_text scale="h2" weight="heavy">Virtual Hosts</rich_text>
      <rich_text>
</rich_text>
    </node>
    <node name="Username Enumeration" unique_id="21" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646811342" ts_lastsave="1646811415">
      <rich_text>User enumeration is when a malicious actor can use </rich_text>
      <rich_text link="webs https://www.rapid7.com/fundamentals/brute-force-and-dictionary-attacks/">brute-force techniques</rich_text>
      <rich_text> to either guess or confirm valid users in a system. User enumeration is often a </rich_text>
      <rich_text link="webs https://www.rapid7.com/fundamentals/web-application-vulnerabilities/">web application vulnerability</rich_text>
      <rich_text>,  though it can also be found in any system that requires user  authentication. Two of the most common areas where user enumeration  occurs are in a site's login page and its ‘Forgot Password'  functionality.
The malicious actor is looking for differences in the server's  response based on the validity of submitted credentials. The Login form  is a common location for this type of behavior. When the user enters an  invalid username and password, the server returns a response saying that  user ‘rapid7' does not exist. A malicious actor would know that the  problem is not with the password, but that this username does not exist  in the system, as shown in Figure 1:
</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
On the other hand, if the user enters a valid username with an  invalid password, and the server returns a different response that  indicates that the password is incorrect, the malicious actor can then  infer that the username is valid, as shown in Figure 2:
</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
At this point, the malicious actor knows how the server will respond  to ‘known good' and ‘known bad' input. So, the malicious actor can then  perform a brute-force attack with common usernames, or may use census  data of common last names and append each letter of the alphabet to  generate valid username lists.
Once a list of validated usernames is created, the malicious actor  can then perform another round of brute-force testing, but this time  against the passwords until access is finally gained.

</rich_text>
      <encoded_png char_offset="856" justification="left" link="webs https://blog.rapid7.com/content/images/post-images/63967/user-enum.jpg"></encoded_png>
      <encoded_png char_offset="1118" justification="left" link="webs https://blog.rapid7.com/content/images/post-images/63967/user2.jpg"></encoded_png>
    </node>
    <node name="SQLi" unique_id="42" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1650994194" ts_lastsave="1650997403">
      <rich_text>                                                 SQL injection is a web security vulnerability that  allows an attacker to interfere with the queries that an application  makes to its database. It generally allows an attacker to view data that  they are not normally able to retrieve. This might include data  belonging to other users, or any other data that the application itself  is able to access. In many cases, an attacker can modify or delete this  data, causing persistent changes to the application's content or  behavior.                 
                                     In some situations, an attacker can escalate an SQL  injection attack to compromise the underlying server or other back-end  infrastructure, or perform a denial-of-service attack.                 
            
        

</rich_text>
      <rich_text scale="h2">Retrieving hidden data</rich_text>
      <rich_text>
                     Consider a shopping application that displays products in  different categories. When the user clicks on the Gifts category, their  browser requests the URL:         
        </rich_text>
      <rich_text family="monospace">https://insecure-website.com/products?category=Gifts</rich_text>
      <rich_text>                     This causes the application to make an SQL query to retrieve details of the relevant products from the database:         
        </rich_text>
      <rich_text family="monospace">SELECT * FROM products WHERE category = 'Gifts' AND released = 1</rich_text>
      <rich_text>                     This SQL query asks the database to return:         
                    •                 all details (*)            
            •                 from the products table            
            •                 where the category is Gifts            
            •                 and released is 1.            
        
                     The restriction </rich_text>
      <rich_text family="monospace">released = 1</rich_text>
      <rich_text> is being used to hide products that are not released. For unreleased products, presumably </rich_text>
      <rich_text family="monospace">released = 0</rich_text>
      <rich_text>.         
                     The application doesn't implement any defenses against SQL  injection attacks, so an attacker can construct an attack like:         
        </rich_text>
      <rich_text family="monospace">https://insecure-website.com/products?category=Gifts'--</rich_text>
      <rich_text>                     This results in the SQL query:         
        </rich_text>
      <rich_text family="monospace">SELECT * FROM products WHERE category = 'Gifts'--' AND released = 1</rich_text>
      <rich_text>                     The key thing here is that the double-dash sequence </rich_text>
      <rich_text family="monospace">--</rich_text>
      <rich_text>  is a comment indicator in SQL, and means that the rest of the query is  interpreted as a comment. This effectively removes the remainder of the  query, so it no longer includes </rich_text>
      <rich_text family="monospace">AND released = 1</rich_text>
      <rich_text>. This means that all products are displayed, including unreleased products.         
                     Going further, an attacker can cause the application to  display all the products in any category, including categories that they  don't know about:         
        </rich_text>
      <rich_text family="monospace">https://insecure-website.com/products?category=Gifts'+OR+1=1--</rich_text>
      <rich_text>                     This results in the SQL query:         
        </rich_text>
      <rich_text family="monospace">SELECT * FROM products WHERE category = 'Gifts' OR 1=1--' AND released = 1</rich_text>
      <rich_text>                     The modified query will return all items where either the category is Gifts, or 1 is equal to 1. Since </rich_text>
      <rich_text family="monospace">1=1</rich_text>
      <rich_text> is always true, the query will return all items.         


</rich_text>
      <rich_text scale="h2">Subverting application logic</rich_text>
      <rich_text>
                     Consider an application that lets users log in with a username and password. If a user submits the username </rich_text>
      <rich_text family="monospace">wiener</rich_text>
      <rich_text> and the password </rich_text>
      <rich_text family="monospace">bluecheese</rich_text>
      <rich_text>, the application checks the credentials by performing the following SQL query:         
        </rich_text>
      <rich_text family="monospace">SELECT * FROM users WHERE username = 'wiener' AND password = 'bluecheese'</rich_text>
      <rich_text>                     If the query returns the details of a user, then the login is successful. Otherwise, it is rejected.         
                     Here, an attacker can log in as any user without a password simply by using the SQL comment sequence </rich_text>
      <rich_text family="monospace">--</rich_text>
      <rich_text> to remove the password check from the </rich_text>
      <rich_text family="monospace">WHERE</rich_text>
      <rich_text> clause of the query. For example, submitting the username </rich_text>
      <rich_text family="monospace">administrator'--</rich_text>
      <rich_text> and a blank password results in the following query:         
        </rich_text>
      <rich_text family="monospace">SELECT * FROM users WHERE username = 'administrator'--' AND password = ''</rich_text>
      <rich_text>                     This query returns the user whose username is </rich_text>
      <rich_text family="monospace">administrator</rich_text>
      <rich_text> and successfully logs the attacker in as that user.         


</rich_text>
      <rich_text scale="h2">Retrieving data from other database tables</rich_text>
      <rich_text>
                     In cases where the results of an SQL query are returned  within the application's responses, an attacker can leverage an SQL  injection vulnerability to retrieve data from other tables within the  database. This is done using the </rich_text>
      <rich_text family="monospace">UNION</rich_text>
      <rich_text> keyword, which lets you execute an additional </rich_text>
      <rich_text family="monospace">SELECT</rich_text>
      <rich_text> query and append the results to the original query.         
                     For example, if an application executes the following query containing the user input "Gifts":         
        </rich_text>
      <rich_text family="monospace">SELECT name, description FROM products WHERE category = 'Gifts'</rich_text>
      <rich_text>                     then an attacker can submit the input:         
        </rich_text>
      <rich_text family="monospace">' UNION SELECT username, password FROM users--</rich_text>
      <rich_text>                     This will cause the application to return all usernames and  passwords along with the names and descriptions of products.         
</rich_text>
    </node>
    <node name="Authentication" unique_id="43" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1650998298" ts_lastsave="1656476136">
      <rich_text scale="h3">Identification and Authentication Failure</rich_text>
      <rich_text>

Identification refers to the ability to identify a user uniquely. In  contrast, authentication refers to the ability to prove that the user is  whom they claims to be. The online shop must confirm the user’s  identity and authenticate them before they can use the system. However,  this step is prone to different types of weaknesses. Example weaknesses  include:

• Allowing the attacker to use brute force, i.e., try many passwords, usually using automated tools, to find valid login credentials.
• Allowing the user to choose a weak password. A weak password is usually easy to guess.
• Storing the users’ passwords in plain text. If the attacker manages to read the file containing the passwords, we don’t want them to be able to learn the stored password.

</rich_text>
    </node>
    <node name="Cross Site Request Forgery (CSRF)" unique_id="44" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1651683314" ts_lastsave="1651683391">
      <rich_text>
</rich_text>
      <rich_text scale="h2">What is CSRF?</rich_text>
      <rich_text>
                     Cross-site request forgery (also known as CSRF) is a web  security vulnerability that allows an attacker to induce users to  perform actions that they do not intend to perform. It allows an  attacker to partly circumvent the same origin policy, which is designed  to prevent different websites from interfering with each other.         

</rich_text>
      <rich_text scale="h2">What is the impact of a CSRF attack?</rich_text>
      <rich_text>

                     In a successful CSRF attack, the attacker causes the victim  user to carry out an action unintentionally. For example, this might be  to change the email address on their account, to change their password,  or to make a funds transfer. Depending on the nature of the action, the  attacker might be able to gain full control over the user's account. If  the compromised user has a privileged role within the application, then  the attacker might be able to take full control of all the application's  data and functionality.         
        
</rich_text>
      <rich_text scale="h2">How does CSRF work?</rich_text>
      <rich_text>
                     For a CSRF attack to be possible, three key conditions must be in place:         
                    •                 </rich_text>
      <rich_text weight="heavy">A relevant action.</rich_text>
      <rich_text> There is an action within the application that the attacker has a reason to induce. This might be a privileged action (such as modifying permissions for other users) or any action on user-specific data (such as changing the user's own password).            
            •                 </rich_text>
      <rich_text weight="heavy">Cookie-based session handling.</rich_text>
      <rich_text> Performing the action involves issuing one or more HTTP requests, and the application relies solely on session cookies to identify the user who has made the requests. There is no other mechanism in place for tracking sessions or validating user requests.            
            •                 </rich_text>
      <rich_text weight="heavy">No unpredictable request parameters.</rich_text>
      <rich_text> The requests that perform the action do not contain any parameters whose values the attacker cannot determine or guess. For example, when causing a user to change their password, the function is not vulnerable if an attacker needs to know the value of the existing password.            
        
                     For example, suppose an application contains a function that  lets the user change the email address on their account. When a user  performs this action, they make an HTTP request like the following:         
        </rich_text>
      <rich_text family="monospace">POST /email/change HTTP/1.1Host: vulnerable-website.comContent-Type: application/x-www-form-urlencodedContent-Length: 30Cookie: session=yvthwsztyeQkAPzeQ5gHgTvlyxHfsAfEemail=wiener@normal-user.com</rich_text>
      <rich_text>                     This meets the conditions required for CSRF:         
                    ◇                 The action of changing the email address on a user's account is of interest to an attacker. Following this action, the attacker will typically be able to trigger a password reset and take full control of the user's account.            
            ◇                 The application uses a session cookie to identify which user issued the request. There are no other tokens or mechanisms in place to track user sessions.            
            ◇                 The attacker can easily determine the values of the request parameters that are needed to perform the action.            
        
                     With these conditions in place, the attacker can construct a web page containing the following HTML:         
        </rich_text>
      <rich_text family="monospace">&lt;html&gt;    &lt;body&gt;        &lt;form action="https://vulnerable-website.com/email/change" method="POST"&gt;            &lt;input type="hidden" name="email" value="pwned@evil-user.net" /&gt;        &lt;/form&gt;        &lt;script&gt;            document.forms[0].submit();        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;</rich_text>
      <rich_text>                     If a victim user visits the attacker's web page, the following will happen:         
                    ◇                 The attacker's page will trigger an HTTP request to the vulnerable web site.            
            ◇                 If the user is logged in to the vulnerable web site, their browser will automatically include their session cookie in the request (assuming </rich_text>
      <rich_text link="webs https://portswigger.net/web-security/csrf/samesite-cookies">SameSite cookies</rich_text>
      <rich_text> are not being used).            
            ◇                 The vulnerable web site will process the request in the normal way, treat it as having been made by the victim user, and change their email address.            
        
</rich_text>
    </node>
    <node name="Server Side Request Forgery (SSRF)" unique_id="46" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1651683491" ts_lastsave="1651688133">
      <rich_text>
</rich_text>
      <rich_text scale="h2">What is SSRF?</rich_text>
      <rich_text>
                     Server-side request forgery (also known as SSRF) is a web  security vulnerability that allows an attacker to induce the server-side  application to make requests to an unintended location.         
                     In a typical SSRF attack, the attacker might cause the  server to make a connection to internal-only services within the  organization's infrastructure. In other cases, they may be able to force  the server to connect to arbitrary external systems, potentially  leaking sensitive data such as authorization credentials.         


</rich_text>
      <rich_text scale="h2">What is the impact of SSRF attacks?</rich_text>
      <rich_text>
                     A successful SSRF attack can often result in unauthorized  actions or access to data within the organization, either in the  vulnerable application itself or on other back-end systems that the  application can communicate with. In some situations, the SSRF  vulnerability might allow an attacker to perform arbitrary command  execution. An SSRF exploit that causes connections to external  third-party systems might result in malicious onward attacks that appear  to originate from the organization hosting the vulnerable application.         
        
</rich_text>
      <rich_text scale="h2">Common SSRF attacks</rich_text>
      <rich_text>
                     SSRF attacks often exploit trust relationships to escalate  an attack from the vulnerable application and perform unauthorized  actions. These trust relationships might exist in relation to the server  itself, or in relation to other back-end systems within the same  organization.         
        
</rich_text>
      <rich_text scale="h3">SSRF attacks against the server itself</rich_text>
      <rich_text>
                     In an SSRF attack against the server itself, the attacker  induces the application to make an HTTP request back to the server that  is hosting the application, via its loopback network interface. This  will typically involve supplying a URL with a hostname like </rich_text>
      <rich_text family="monospace">127.0.0.1</rich_text>
      <rich_text> (a reserved IP address that points to the loopback adapter) or </rich_text>
      <rich_text family="monospace">localhost</rich_text>
      <rich_text> (a commonly used name for the same adapter).         
                     For example, consider a shopping application that lets the  user view whether an item is in stock in a particular store. To provide  the stock information, the application must query various back-end REST  APIs, dependent on the product and store in question. The function is  implemented by passing the URL to the relevant back-end API endpoint via  a front-end HTTP request. So when a user views the stock status for an  item, their browser makes a request like this:         
        </rich_text>
      <rich_text family="monospace">POST /product/stock HTTP/1.0Content-Type: application/x-www-form-urlencodedContent-Length: 118stockApi=http://stock.weliketoshop.net:8080/product/stock/check%3FproductId%3D6%26storeId%3D1</rich_text>
      <rich_text>                     This causes the server to make a request to the specified  URL, retrieve the stock status, and return this to the user.         
                     In this situation, an attacker can modify the request to specify a URL local to the server itself. For example:         
        </rich_text>
      <rich_text family="monospace">POST /product/stock HTTP/1.0Content-Type: application/x-www-form-urlencodedContent-Length: 118stockApi=http://localhost/admin</rich_text>
      <rich_text>                     Here, the server will fetch the contents of the </rich_text>
      <rich_text family="monospace">/admin</rich_text>
      <rich_text> URL and return it to the user.         
                     Now of course, the attacker could just visit the </rich_text>
      <rich_text family="monospace">/admin</rich_text>
      <rich_text>  URL directly. But the administrative functionality is ordinarily  accessible only to suitable authenticated users. So an attacker who  simply visits the URL directly won't see anything of interest. However,  when the request to the </rich_text>
      <rich_text family="monospace">/admin</rich_text>
      <rich_text> URL comes from the local machine itself, the normal </rich_text>
      <rich_text link="webs https://portswigger.net/web-security/access-control">access controls</rich_text>
      <rich_text>  are bypassed. The application grants full access to the administrative  functionality, because the request appears to originate from a trusted  location.         



</rich_text>
      <rich_text scale="h3">SSRF attacks against other back-end systems</rich_text>
      <rich_text>
                     Another type of trust relationship that often arises with  server-side request forgery is where the application server is able to  interact with other back-end systems that are not directly reachable by  users. These systems often have non-routable private IP addresses. Since  the back-end systems are normally protected by the network topology,  they often have a weaker security posture. In many cases, internal  back-end systems contain sensitive functionality that can be accessed  without authentication by anyone who is able to interact with the  systems.         
                     In the preceding example, suppose there is an administrative interface at the back-end URL </rich_text>
      <rich_text family="monospace"> https://192.168.0.68/admin</rich_text>
      <rich_text>.  Here, an attacker can exploit the SSRF vulnerability to access the  administrative interface by submitting the following request:         
        </rich_text>
      <rich_text family="monospace">POST /product/stock HTTP/1.0Content-Type: application/x-www-form-urlencodedContent-Length: 118stockApi=http://192.168.0.68/admin</rich_text>
      <rich_text>
        
        
</rich_text>
      <rich_text scale="h2">Circumventing common SSRF defenses</rich_text>
      <rich_text>
                     It is common to see applications containing SSRF behavior  together with defenses aimed at preventing malicious exploitation.  Often, these defenses can be circumvented.         
        
</rich_text>
      <rich_text scale="h3">SSRF with blacklist-based input filters</rich_text>
      <rich_text>
                     Some applications block input containing hostnames like </rich_text>
      <rich_text family="monospace">127.0.0.1</rich_text>
      <rich_text> and </rich_text>
      <rich_text family="monospace">localhost</rich_text>
      <rich_text>, or sensitive URLs like </rich_text>
      <rich_text family="monospace">/admin</rich_text>
      <rich_text>. In this situation, you can often circumvent the filter using various techniques:         
                    •                 Using an alternative IP representation of </rich_text>
      <rich_text family="monospace">127.0.0.1</rich_text>
      <rich_text>, such as </rich_text>
      <rich_text family="monospace">2130706433</rich_text>
      <rich_text>, </rich_text>
      <rich_text family="monospace">017700000001</rich_text>
      <rich_text>, or </rich_text>
      <rich_text family="monospace">127.1</rich_text>
      <rich_text>.            
            •                 Registering your own domain name that resolves to </rich_text>
      <rich_text family="monospace">127.0.0.1</rich_text>
      <rich_text>. You can use </rich_text>
      <rich_text family="monospace">spoofed.burpcollaborator.net</rich_text>
      <rich_text> for this purpose.            
            •                 Obfuscating blocked strings using URL encoding or case variation.            example: </rich_text>
      <rich_text link="webs http://127.1/%25%36%31%25%36%34%25%36%64%25%36%39%25%36%65/delete?username=%63%61%72%6c%6f%73">http://127.1/%25%36%31%25%36%34%25%36%64%25%36%39%25%36%65/delete?username=%63%61%72%6c%6f%73</rich_text>
      <rich_text> , some of the string is still there (beginning of IP address as well as delete?username request, but some is encoded using URL encode option in burpsuite repeater. Try encoding in a non-uniform manner.
        
</rich_text>
    </node>
    <node name="Broken Access Control" unique_id="51" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656476130" ts_lastsave="1656476189">
      <rich_text>Access control ensures that each user can only access files  (documents, images, etc.) related to their role or work. For example,  you don’t want someone in the marketing department to access (read) the  finance department’s documents. Example vulnerabilities related to  access control include:
• Failing to apply </rich_text>
      <rich_text style="italic">the principle of the least privilege</rich_text>
      <rich_text> and giving users more access permissions than they need. For example, an online customer should be able to view the prices of the items, but they should not be able to change them.
• Being able to view or modify someone else’s account by using its unique identifier. For example, you don’t want one bank client to be able to view the transactions of another client.
• Being able to browse pages that require authentication (logging in) as an unauthenticated user. For example, we cannot let anyone view the webmail before logging in.

</rich_text>
    </node>
    <node name="IDOR" unique_id="53" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656476300" ts_lastsave="1657256464">
      <rich_text>Insecure Direct Object References (IDOR). IDOR falls under the category of Broken Access Control. Broken access control means that an attacker can access information or perform actions not intended for them. This type of vulnerability can occur when a web server receives  user-supplied input to retrieve objects (files, data, documents), too  much trust has been placed on the input data, and it is not validated on  the server-side to confirm the requested object belongs to the user  requesting it.


</rich_text>
      <rich_text scale="h2" weight="heavy">Encoded IDs</rich_text>
      <rich_text>
When  passing data from page to page either by post data, query strings, or  cookies, web developers will often first take the raw data and encode  it. Encoding ensures that the receiving web server will be able to  understand the contents. Encoding changes binary data into an ASCII  string commonly using the </rich_text>
      <rich_text family="monospace">a-z, A-Z, 0-9 and = </rich_text>
      <rich_text>character  for padding. The most common encoding technique on the web is base64  encoding and can usually be pretty easy to spot. You can use websites  like </rich_text>
      <rich_text link="webs https://www.base64decode.org/">https://www.base64decode.org/</rich_text>
      <rich_text> to decode the string, then edit the data and re-encode it again using </rich_text>
      <rich_text link="webs https://www.base64encode.org/">https://www.base64encode.org/</rich_text>
      <rich_text> and then resubmit the web request to see if there is a change in the response. 
</rich_text>
    </node>
    <node name="HTML" unique_id="54" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656476936" ts_lastsave="1656476938">
      <rich_text>The HTML structure (as shown in the screenshot) has the following components:
• The </rich_text>
      <rich_text family="monospace">&lt;!DOCTYPE html&gt;</rich_text>
      <rich_text>  defines that the page is a HTML5 document. This helps with  standardisation across different browsers and tells the browser to use  HTML5 to interpret the page.
• The </rich_text>
      <rich_text family="monospace">&lt;html&gt;</rich_text>
      <rich_text> element is the root element of the HTML page - all other elements come after this element.
• The </rich_text>
      <rich_text family="monospace">&lt;head&gt;</rich_text>
      <rich_text> element contains information about the page (such as the page title)
• The </rich_text>
      <rich_text family="monospace">&lt;body&gt;</rich_text>
      <rich_text> element defines the HTML document's body; only content inside of the body is shown in the browser.
• The </rich_text>
      <rich_text family="monospace">&lt;h1&gt;</rich_text>
      <rich_text> element defines a large heading
• The </rich_text>
      <rich_text family="monospace">&lt;p&gt;</rich_text>
      <rich_text> element defines a paragraph
• </rich_text>
      <rich_text scale="small">There are many other elements (tags) used for different purposes. For example, there are tags for buttons (</rich_text>
      <rich_text family="monospace" scale="small">&lt;button&gt;</rich_text>
      <rich_text scale="small">), images (</rich_text>
      <rich_text family="monospace" scale="small">&lt;img&gt;</rich_text>
      <rich_text scale="small">), lists, and much more. </rich_text>
      <rich_text>

</rich_text>
    </node>
    <node name="Javascript" unique_id="55" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656477073" ts_lastsave="1656477075">
      <rich_text>JavaScript (JS) is one of the most popular coding languages in the  world and allows pages to become interactive. HTML is used to create the  website structure and content, while JavaScript is used to control the  functionality of web pages - without JavaScript, a page would not have  interactive elements and would always be static. JS can dynamically  update the page in real-time, giving functionality to change the style  of a button when a particular event on the page occurs (such as when a  user clicks a button) or to display moving animations.

</rich_text>
      <rich_text scale="small">JavaScript is added within the page source code and can be either loaded within </rich_text>
      <rich_text family="monospace" scale="small">&lt;script&gt;</rich_text>
      <rich_text scale="small"> tags or can be included remotely with the src attribute: </rich_text>
      <rich_text family="monospace">&lt;script src="/location/of/javascript_file.js"&gt;&lt;/script&gt;</rich_text>
      <rich_text>

The  following JavaScript code finds a HTML element on the page with the id  of "demo" and changes the element's contents to "Hack the Planet" : </rich_text>
      <rich_text family="monospace">document.getElementById("demo").innerHTML = "Hack the Planet";</rich_text>
      <rich_text>
HTML  elements can also have events, such as "onclick" or "onhover" that  execute JavaScript when the event occurs. The following code changes the  text of the element with the demo ID to Button Clicked: </rich_text>
      <rich_text family="monospace">&lt;button onclick='document.getElementById("demo").innerHTML = "Button Clicked";'&gt;Click Me!&lt;/button&gt;</rich_text>
      <rich_text> - onclick events can also be defined inside the JavaScript script tags, and not on elements directly. 
</rich_text>
    </node>
    <node name="Sensitive Data Exposure" unique_id="56" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656477471" ts_lastsave="1656477474">
      <rich_text>Sensitive Data Exposure occurs when a website doesn't properly  protect (or remove) sensitive clear-text information to the end-user;  usually found in a site's frontend source code.
We now know that  websites are built using many HTML elements (tags), all of which we can  see simply by "viewing the page source". A website developer may have  forgotten to remove login credentials, hidden links to private parts of  the website or other sensitive data shown in HTML or JavaScript.
</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
Sensitive  information can be potentially leveraged to further an attacker's  access within different parts of a web application. For example, there  could be HTML comments with temporary login credentials, and if you  viewed the page's source code and found this, you could use these  credentials to log in elsewhere on the application (or worse, used to  access other backend components of the site).

Whenever  you're assessing a web application for security issues, one of the first  things you should do is review the page source code to see if you can  find any exposed login credentials or hidden links.
</rich_text>
      <encoded_png char_offset="483" justification="left" link="webs https://assets.tryhackme.com/additional/how-websites-work/html_source.png"></encoded_png>
    </node>
    <node name="HTML Injection" unique_id="57" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656477665" ts_lastsave="1656477668">
      <rich_text>HTML Injection is a vulnerability that occurs when unfiltered user input is displayed on the page. </rich_text>
      <rich_text scale="small">If  a website fails to sanitise user input (filter any "malicious" text  that a user inputs into a website), and that input is used on the page,  an attacker can inject HTML code into a vulnerable website.</rich_text>
      <rich_text>

Input  sanitisation is very important in keeping a website secure, as  information a user inputs into a website is often used in other frontend  and backend functionality. A vulnerability you'll explore in another  lab is database injection, where you can manipulate a database lookup  query to log in as another user by controlling the input that's directly  used in the query - but for now, let's focus on HTML injection (which  is client-side).

When a user has control of how their input is  displayed, they can submit HTML (or JavaScript) code, and the browser  will use it on the page, allowing the user to control the page's  appearance and functionality.
</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
The  image above shows how a form outputs text to the page. Whatever the  user inputs into the "What's your name" field is passed to a JavaScript  function and output to the page, which means if the user adds their own  HTML or JavaScript in the field, it's used in the sayHi function and is  added to the page - this means you can add your own HTML (such as a  &lt;h1&gt; tag) and it will output your input as pure HTML.

The  general rule is never to trust user input. To prevent malicious input,  the website developer should sanitise everything the user enters before  using it in the JavaScript function; in this case, the developer could  remove any HTML tags.
</rich_text>
      <encoded_png char_offset="969" justification="left" link="webs https://assets.tryhackme.com/additional/how-websites-work/html_injection.png"></encoded_png>
    </node>
    <node name="Cookies" unique_id="59" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656650445" ts_lastsave="1656650484">
      <rich_text>HTTP is an inherently </rich_text>
      <rich_text style="italic">stateless</rich_text>
      <rich_text> protocol. This means that no  data persists between connections; your computer could make two  requests immediately after each other, and, without relying on separate  software, the web server would have no way to know that it was you  making both the requests. This begs the important question: if HTTP is  stateless, then how do login systems work? The web server must have a  way to identify that you have the right level of access, and it can  hardly ask you to enter your password every time you request a new page!

The answer is cookies -- tiny little pieces of information that get  stored on your computer and get sent to the server along with every  request that you make. Authentication (or session) cookies are used to  identify you (these will be </rich_text>
      <rich_text style="italic">very</rich_text>
      <rich_text> important in your mission  today!). The server receives your request with the attached cookie, and  checks the cookie to see what level of access you are allowed to have.  It then returns a response appropriate to that level of access.
 
For example, a standard user should be able to see (but not interact  with) our control panel; but Santa should be able to access everything!  Cookies are also often used for other purposes such as advertising and  storing user preferences (light/dark theme, for example); however, this  will not be important in your task today. Any site can set cookies with a  variety of properties -- the most important of these for today's task  are the name and value of the cookies, both of which will always be set.  It's worth noting that a site can only access cookies that are  associated with its own domain (i.e. google.com can't access any cookies  stored by tryhackme.com, and vice versa).


 It's important to note that cookies are stored locally on </rich_text>
      <rich_text style="italic">your</rich_text>
      <rich_text>  computer. This means that they are under your control -- i.e. you can  add, edit, or delete them as you wish. There are a few ways to do this,  however, it's most commonly done by using your Browser Developer Tools,  which can be accessed in most browsers by pressing </rich_text>
      <rich_text family="monospace">F12</rich_text>
      <rich_text>, or </rich_text>
      <rich_text family="monospace">Ctrl + Shift + I</rich_text>
      <rich_text>. With the developer tools open, navigate to the </rich_text>
      <rich_text family="monospace">Storage</rich_text>
      <rich_text> tab in FireFox, or the </rich_text>
      <rich_text family="monospace">Application</rich_text>
      <rich_text> tab in Chrome/Edge and select the </rich_text>
      <rich_text family="monospace">Cookies</rich_text>
      <rich_text> menu on the left hand side of the console.
</rich_text>
    </node>
    <node name="Requests" unique_id="60" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1656650592" ts_lastsave="1656650599">
      <rich_text>
</rich_text>
      <rich_text underline="single" style="italic" scale="h3">﻿GET Parameters and URLs</rich_text>
      <rich_text>
We looked briefly at the differences between GET and POST requests in  the previous dossier; however, the emphasis was on the POST requests  used in a login form. The server you'll be testing today employs a  concept called "GET parameters". Just as POST requests can be used to  send information to the server, so too can GET requests be used;  however, there is one important difference. With POST requests the data  being sent is included in the "body" of the request. With GET requests,  the data is included in the URL as a "parameter". This is best  demonstrated with an example:
</rich_text>
      <rich_text family="monospace">https://www.thebestfestivalcompany.xyz/index.php?snack=mincePie</rich_text>
      <rich_text>
(</rich_text>
      <rich_text weight="heavy">Please Note</rich_text>
      <rich_text>: this site is completely fictitious. It does not exist, and connecting to it is not part of the task)
There are 7 different parts which make up this URL. Let's look at each of them in turn:
 
1. First up we have the protocol (</rich_text>
      <rich_text family="monospace">https://</rich_text>
      <rich_text>). This specifies whether the request should be made using HTTP, or HTTPS. In our example, we are using HTTPS.
2. Next we have the </rich_text>
      <rich_text style="italic">subdomain</rich_text>
      <rich_text> (</rich_text>
      <rich_text family="monospace">www</rich_text>
      <rich_text>). This is traditionally "www" (</rich_text>
      <rich_text weight="heavy">W</rich_text>
      <rich_text>orld </rich_text>
      <rich_text weight="heavy">W</rich_text>
      <rich_text>ide </rich_text>
      <rich_text weight="heavy">W</rich_text>
      <rich_text>eb) to signify that the target is a website; however, this is not essential. Indeed, subdomains can be basically anything you want; for example, a lot of websites use things like "</rich_text>
      <rich_text family="monospace">assets</rich_text>
      <rich_text>", or "</rich_text>
      <rich_text family="monospace">api</rich_text>
      <rich_text>" to indicate different subdomains with different uses. (e.g. </rich_text>
      <rich_text family="monospace">https://api.thebestfestivalcompany.xyz</rich_text>
      <rich_text>)
3. The next part of the URL is the </rich_text>
      <rich_text style="italic">domain</rich_text>
      <rich_text> (</rich_text>
      <rich_text family="monospace">thebestfestivalcompany</rich_text>
      <rich_text>). Domains need to be registered and are used as links between a memorable word or phrase, and an IP address. In other words, they're used to give a </rich_text>
      <rich_text style="italic">name</rich_text>
      <rich_text> to the server running a website.
4. Next up we have the TLD (</rich_text>
      <rich_text weight="heavy">T</rich_text>
      <rich_text>op </rich_text>
      <rich_text weight="heavy">L</rich_text>
      <rich_text>evel </rich_text>
      <rich_text weight="heavy">D</rich_text>
      <rich_text>omain) -- </rich_text>
      <rich_text family="monospace">.xyz</rich_text>
      <rich_text>, for our example. Top-level domains are used by DNS to determine where to look if they want to find your domain. Previously top-level domains had specific uses (and many still do!), but this is not always the case these days. For example, </rich_text>
      <rich_text family="monospace">.co.uk</rich_text>
      <rich_text>  indicates a company based in the UK, </rich_text>
      <rich_text family="monospace">.com</rich_text>
      <rich_text> indicates a company based in the US.
5. We then have the </rich_text>
      <rich_text style="italic">resource</rich_text>
      <rich_text> that we're selecting -- in this case that is the homepage of the website: </rich_text>
      <rich_text family="monospace">index.php</rich_text>
      <rich_text>. As a side note, all homepages </rich_text>
      <rich_text style="italic">must</rich_text>
      <rich_text> be called "index" in order to be correctly served by the web server without having to be specified fully, unless this parameter has been changed from the default in the webserver configuration. This is how you can go to </rich_text>
      <rich_text family="monospace">https://tryhackme.com</rich_text>
      <rich_text> without having to specify that you want to receive the home page -- the index page is served automatically because you didn't specify!
6. The final two aspects of the URL are the most important for our current topic: they both relate to GET parameters. First up we have </rich_text>
      <rich_text family="monospace">?snack=</rich_text>
      <rich_text>. Here </rich_text>
      <rich_text family="monospace">?</rich_text>
      <rich_text> is used to specify that a GET parameter is forthcoming. We then have the parameter name: </rich_text>
      <rich_text family="monospace">snack</rich_text>
      <rich_text>. This is used to identify the parameter to the server. We then have an equals sign (</rich_text>
      <rich_text family="monospace">=</rich_text>
      <rich_text>), indicating that the value will come next.
7. Finally, we have the value of the GET parameter: </rich_text>
      <rich_text family="monospace">mincePie</rich_text>
      <rich_text>, because who doesn't like mince pies, right?
It's important to note exactly which part of the URL is the GET parameter. Specifically, we are talking about </rich_text>
      <rich_text family="monospace">?snack=mincePie</rich_text>
      <rich_text>. If there was more than one parameter, we would separate them with an ampersand (</rich_text>
      <rich_text family="monospace">&amp;</rich_text>
      <rich_text>). For example: </rich_text>
      <rich_text family="monospace">?snack=mincePie&amp;drink=hotChocolate</rich_text>
      <rich_text>
</rich_text>
    </node>
  </node>
  <node name="Bug Bounty" unique_id="48" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655311116" ts_lastsave="1655315996">
    <rich_text link="webs https://m0chan.github.io/2019/12/17/Bug-Bounty-Cheetsheet.html">https://m0chan.github.io/2019/12/17/Bug-Bounty-Cheetsheet.html</rich_text>
    <node name="Discovery/Fingerprinting" unique_id="49" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655313862" ts_lastsave="1655314557">
      <rich_text>
 </rich_text>
      <rich_text underline="single" scale="h2" weight="heavy"> WHOIS</rich_text>
      <rich_text>
 
 We can confirm current registration status with a whois lookup.
A 'whois' lookup is the most basic form of domain recon available. There are multiple websites that will do it for you as well.
Personally, I recommend just going directly to </rich_text>
      <rich_text link="webs https://lookup.icann.org/lookup">lookup.icann.org</rich_text>
      <rich_text>.  This should tell you the current hosting company used and name servers.  Looking at the raw data option will show further details.
We're  looking for any data we might be able to use as pivot points. Maybe an  email address? Or better yet, a physical address or phone number?
</rich_text>
      <rich_text style="italic" weight="heavy">Technically</rich_text>
      <rich_text>  these are required in order to register any domain, but most domain  registrars offer some kind of privacy protection for a trivial fee, if  not free.

</rich_text>
      <rich_text underline="single" scale="h1" weight="heavy">DNS</rich_text>
      <rich_text>

ViewDNS.info provides a convenient UI for looking up registration information on a target website. Using this information, it may be possible to draw certain conclusions that are not clearly spelled out, such as whether the website is hosted on a shared or dedicated IP address. The answer to this question can imply things about the website's budget as well as traffic.

</rich_text>
      <rich_text underline="single" scale="h1" weight="heavy">IP</rich_text>
      <rich_text>

nslookup is a network administration command-line tool for  querying the Domain Name System to obtain the mapping between domain  name and IP address, or other DNS records
</rich_text>
      <rich_text link="webs https://www.digwebinterface.com/">https://www.digwebinterface.com/</rich_text>
      <rich_text>
dnsdumpster.com

</rich_text>
    </node>
  </node>
  <node name="Networks" unique_id="25" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646874420" ts_lastsave="1655714640">
    <node name="OSI" unique_id="26" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646880934" ts_lastsave="1646881069">
      <rich_text>The OSI Model (Open Systems Interconnection Model) is a conceptual framework used to describe the functions of a networking system. The OSI model characterizes computing functions into a universal set of rules and requirements in order to support interoperability between different products and software. In the OSI reference model, the communications between a computing system are split into seven different abstraction layers: Physical, Data Link, Network, Transport, Session, Presentation, and Application.

        
</rich_text>
      <rich_text scale="h2">     Physical Layer  </rich_text>
      <rich_text>
                    The lowest layer of the OSI Model is concerned with electrically  or optically transmitting raw unstructured data bits across the network  from the physical layer of the sending device to the physical layer of  the receiving device. It can include specifications such as voltages,  pin layout, cabling, and radio frequencies. At the physical layer, one  might find “physical” resources such as network hubs, cabling,  repeaters, network adapters or modems.
          
</rich_text>
      <rich_text scale="h2">     Data Link Layer  </rich_text>
      <rich_text>
                    At the data link layer, directly connected nodes are used to  perform node-to-node data transfer where data is packaged into frames.  The data link layer also corrects errors that may have occurred at the  physical layer.
The data link layer encompasses two sub-layers of its own. The first,  media access control (MAC), provides flow control and multiplexing for  device transmissions over a network. The second, the logical link  control (LLC), provides flow and error control over the physical medium  as well as identifies line protocols.
          
</rich_text>
      <rich_text scale="h2">     Network Layer  </rich_text>
      <rich_text>
                    The network layer is responsible for receiving frames from the  data link layer, and delivering them to their intended destinations  among based on the addresses contained inside the frame. The network  layer finds the destination by using logical addresses, such as IP  (internet protocol). At this layer, routers are a crucial component used  to quite literally route information where it needs to go between  networks.
          
</rich_text>
      <rich_text scale="h2">     Transport Layer  </rich_text>
      <rich_text>
                    The transport layer manages the delivery and error checking of  data packets. It regulates the size, sequencing, and ultimately the  transfer of data between systems and hosts. One of the most common  examples of the transport layer is TCP or the Transmission Control  Protocol.
          
</rich_text>
      <rich_text scale="h2">     Session Layer  </rich_text>
      <rich_text>
                    The session layer controls the conversations between different  computers. A session or connection between machines is set up, managed,  and termined at layer 5. Session layer services also include  authentication and reconnections.
          
</rich_text>
      <rich_text scale="h2">     Presentation Layer  </rich_text>
      <rich_text>
                    The presentation layer formats or translates data for the  application layer based on the syntax or semantics that the application  accepts. Because of this, it at times also called the syntax layer. This  layer can also handle the encryption and decryption required by the  application layer.
          
</rich_text>
      <rich_text scale="h2">     Application Layer  </rich_text>
      <rich_text>
                    At this layer, both the end user and the application layer  interact directly with the software application. This layer sees network  services provided to end-user applications such as a web browser or  Office 365. The application layer identifies communication partners,  resource availability, and synchronizes communication.
  
  
</rich_text>
    </node>
    <node name="IP Addresses" unique_id="50" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1655714640" ts_lastsave="1655714640"/>
  </node>
  <node name="Pentesting" unique_id="5" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646792498" ts_lastsave="1646809827"/>
  <node name="Resources" unique_id="2" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646792465" ts_lastsave="1649687464">
    <node name="Cracking" unique_id="15" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646793265" ts_lastsave="1646793343">
      <rich_text link="webs https://gchq.github.io/CyberChef/">https://gchq.github.io/CyberChef/</rich_text>
      <rich_text> - CyberChef - The Cyber Swiss Army Knife - a web app for encryption, encoding, compression and data analysis.
</rich_text>
      <rich_text link="webs https://crackstation.net/">https://crackstation.net/</rich_text>
      <rich_text> - Crack Station - Online Free Password hash cracker
</rich_text>
    </node>
    <node name="Vulnerabilities" unique_id="16" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646793379" ts_lastsave="1646793379"/>
    <node name="Exploits" unique_id="41" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1649687464" ts_lastsave="1649687491">
      <rich_text link="webs https://www.exploit-db.com">Exploit DB</rich_text>
      <rich_text>, </rich_text>
      <rich_text link="webs https://www.rapid7.com/db/">Rapid7 DB</rich_text>
      <rich_text>, or </rich_text>
      <rich_text link="webs https://www.vulnerability-lab.com">Vulnerability Lab</rich_text>
      <rich_text>
Searchsploit tool in terminal</rich_text>
    </node>
  </node>
  <node name="Linux" unique_id="3" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646792476" ts_lastsave="1649604650">
    <node name="Package Management" unique_id="23" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646843463" ts_lastsave="1646843913">
      <rich_text>In few words, package management is a method of installing and maintaining (which includes updating and probably removing as well) software on the system.
</rich_text>
      <rich_text weight="heavy">apt-get</rich_text>
      <rich_text> is a high-level package manager for Debian and derivatives, and provides a simple way to retrieve and install packages, including dependency resolution, from multiple sources using the command line. Unlike dpkg, apt-get does not work directly with *.deb files, but with the package proper name.

</rich_text>
      <rich_text weight="heavy">To list all the available packages, type the following command.</rich_text>
      <rich_text>
$ apt-cache pkgnames

</rich_text>
      <rich_text weight="heavy">To find out the package name and with it description before installing, use the ‘search‘ flag. Using “search” with apt-cache will display a list of matched packages with short description. Let’s say you would like to find out description of package ‘vsftpd‘, then command would be.</rich_text>
      <rich_text>
$ apt-cache search vsftpd

</rich_text>
      <rich_text weight="heavy">For example, if you would like to check information of package along  with it short description say (version number, check sums, size,  installed size, category etc). Use ‘show‘ sub command as shown below.</rich_text>
      <rich_text>
$ apt-cache show netcat

</rich_text>
      <rich_text weight="heavy">The ‘update‘ command is used to resynchronize the package index files from the their sources specified in /etc/apt/sources.list file. The update command fetched the packages from their locations and update the packages to newer version.</rich_text>
      <rich_text>
$ sudo apt-get update

</rich_text>
      <rich_text weight="heavy">The ‘upgrade‘ command is used to upgrade all the  currently installed software packages on the system. Under any  circumstances currently installed packages are not removed or packages  which are not already installed neither retrieved and installed to  satisfy upgrade dependencies.</rich_text>
      <rich_text>
$ sudo apt-get upgrade

</rich_text>
      <rich_text weight="heavy">The ‘install‘ sub command is tracked by one or more packages wish for installation or upgrading.</rich_text>
      <rich_text>
$ sudo apt-get install netcat

</rich_text>
      <rich_text weight="heavy">The ‘clean‘ command is used to free up the disk space by cleaning retrieved (downloaded) .deb files (packages) from the local repository.</rich_text>
      <rich_text>
$ sudo apt-get clean

</rich_text>
      <rich_text weight="heavy">You can also download, unpack and compile the source code at the same time, using option ‘–compile‘ as shown below.</rich_text>
      <rich_text>
$ sudo apt-get --compile source goaccess

</rich_text>
      <rich_text weight="heavy">To download and unpack source code of a package to a specific directory, type the following command.</rich_text>
      <rich_text>
$ sudo apt-get source vsftpd</rich_text>
    </node>
    <node name="Processes" unique_id="24" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1646844654" ts_lastsave="1646879349">
      <rich_text justification="left"></rich_text>
      <rich_text>

</rich_text>
      <rich_text scale="h2">Top</rich_text>
      <rich_text>
This utility tells the user about all the running processes on the Linux machine.
The terminology follows:
</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>

</rich_text>
      <rich_text scale="h2">PS</rich_text>
      <rich_text>
This command stands for ‘Process Status’. It is similar to the “Task  Manager” that pop-ups in a Windows Machine when we use Cntrl+Alt+Del.  This command is similar to ‘top’ command but the information displayed  is different.
To check all the processes running under a user, use the command –
ps ux

</rich_text>
      <rich_text scale="h2">Kill</rich_text>
      <rich_text>
This command </rich_text>
      <rich_text weight="heavy">terminates running processes</rich_text>
      <rich_text> on a Linux machine.
To use these utilities you need to know the PID (process id) of the process you want to kill

</rich_text>
      <rich_text scale="h2">NICE</rich_text>
      <rich_text>
Linux can run a lot of processes at a time, which can slow down the  speed of some high priority processes and result in poor performance.
To avoid this, you can tell your machine to prioritize processes as per your requirements.
This priority is called Niceness in Linux, and it has a value between  -20 to 19. The lower the Niceness index, the higher would be a priority  given to that task.
The default value of all the processes is 0.
To start a process with a niceness value other than the default value use the following syntax
</rich_text>
      <table char_offset="0" justification="left" col_min="60" col_max="60" col_widths="0,0">
        <row>
          <cell>bg</cell>
          <cell>To send a process to the background</cell>
        </row>
        <row>
          <cell>fg</cell>
          <cell>To run a stopped process in the foreground</cell>
        </row>
        <row>
          <cell>top</cell>
          <cell>Details on all Active Processes</cell>
        </row>
        <row>
          <cell>ps</cell>
          <cell>Give the status of processes running for a user</cell>
        </row>
        <row>
          <cell>ps PID</cell>
          <cell>Gives the status of a particular process</cell>
        </row>
        <row>
          <cell>pidof</cell>
          <cell>Gives the Process ID (PID) of a process</cell>
        </row>
        <row>
          <cell>kill PID</cell>
          <cell>Kills a process</cell>
        </row>
        <row>
          <cell>nice</cell>
          <cell>Starts a process with a given priority</cell>
        </row>
        <row>
          <cell>renice</cell>
          <cell>Changes priority of an already running process</cell>
        </row>
        <row>
          <cell>df</cell>
          <cell>Gives free hard disk space on your system</cell>
        </row>
        <row>
          <cell>free</cell>
          <cell>Gives free RAM on your system</cell>
        </row>
        <row>
          <cell>Command</cell>
          <cell>Description</cell>
        </row>
      </table>
      <table char_offset="114" justification="left" col_min="60" col_max="60" col_widths="0,0,0,0">
        <row>
          <cell>PID</cell>
          <cell>The process ID of each task</cell>
          <cell>1525</cell>
          <cell>961</cell>
        </row>
        <row>
          <cell>User</cell>
          <cell>The username of task owner</cell>
          <cell>Home</cell>
          <cell>Root</cell>
        </row>
        <row>
          <cell>PR</cell>
          <cell>Priority
Can be 20(highest) or -20(lowest)</cell>
          <cell>20</cell>
          <cell>20</cell>
        </row>
        <row>
          <cell>NI</cell>
          <cell>The nice value of a task</cell>
          <cell>0</cell>
          <cell>0</cell>
        </row>
        <row>
          <cell>VIRT</cell>
          <cell>Virtual memory used (kb)</cell>
          <cell>1775</cell>
          <cell>75972</cell>
        </row>
        <row>
          <cell>RES</cell>
          <cell>Physical memory used (kb)</cell>
          <cell>100</cell>
          <cell>51</cell>
        </row>
        <row>
          <cell>SHR</cell>
          <cell>Shared memory used (kb)</cell>
          <cell>28</cell>
          <cell>7952</cell>
        </row>
        <row>
          <cell>S</cell>
          <cell>Status
 There are five types:
           ‘D’ = uninterruptible sleep
           ‘R’ = running
           ‘S’ = sleeping
           ‘T’ = traced or stopped
           ‘Z’ = zombie</cell>
          <cell>S</cell>
          <cell>R</cell>
        </row>
        <row>
          <cell>%CPU</cell>
          <cell>% of CPU time</cell>
          <cell>1.7</cell>
          <cell>1.0</cell>
        </row>
        <row>
          <cell>%MEM</cell>
          <cell>Physical memory used</cell>
          <cell>10</cell>
          <cell>5.1</cell>
        </row>
        <row>
          <cell>TIME+</cell>
          <cell>Total CPU time</cell>
          <cell>5:05.34</cell>
          <cell>2:23.42</cell>
        </row>
        <row>
          <cell>Command</cell>
          <cell>Command name</cell>
          <cell>Photoshop.exe</cell>
          <cell>Xorg</cell>
        </row>
        <row>
          <cell>Field</cell>
          <cell>Description</cell>
          <cell>Example 1</cell>
          <cell>Example 2</cell>
        </row>
      </table>
    </node>
    <node name="Workflow" unique_id="35" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1648814970" ts_lastsave="1648817232">
      <rich_text weight="heavy">mkdir</rich_text>
      <rich_text>  (make directories) allows you to create directories, single or multiple  at a time along with the desired permissions you want to assign them  with.
/Users/Shared/bash$ mkdir sample2
/Users/Shared/bash$ ls
hello.txt sample  sample2

</rich_text>
      <rich_text weight="heavy">touch</rich_text>
      <rich_text>  changes the file access and modifications times for a provided file. If  the provided file is not present then it creates a new file with the  current time as access and modification time. In most cases, the touch  command is used for creating new files.
/Users/Shared/bash$ touch hello2.txt
/Users/Shared/bash$ ls
hello.txt hello2.txt sample

</rich_text>
      <rich_text weight="heavy">mv</rich_text>
      <rich_text> — Use the </rich_text>
      <rich_text weight="heavy">mv</rich_text>
      <rich_text> command to move files through the command line. We can also use the </rich_text>
      <rich_text weight="heavy">mv</rich_text>
      <rich_text> command to rename a file. For example, if we want to rename the file “</rich_text>
      <rich_text weight="heavy">text</rich_text>
      <rich_text>” to “</rich_text>
      <rich_text weight="heavy">new</rich_text>
      <rich_text>”, we can use “</rich_text>
      <rich_text weight="heavy">mv text new</rich_text>
      <rich_text>”. It takes the two arguments, just like the</rich_text>
      <rich_text weight="heavy"> cp</rich_text>
      <rich_text> command.

</rich_text>
      <rich_text weight="heavy">locate</rich_text>
      <rich_text> — The </rich_text>
      <rich_text weight="heavy">locate</rich_text>
      <rich_text> command is used to locate a file in a Linux system, just like the search command in Windows. This command is useful when you don't know where a file is saved or the actual name of the file. Using the -i argument with the command helps to ignore the case (it doesn't matter if it is uppercase or lowercase). So, if you want a file that has the word “hello”, it gives the list of all the files in your Linux system containing the word "hello" when you type in “</rich_text>
      <rich_text weight="heavy">locate -i hello</rich_text>
      <rich_text>”. If you remember two words, you can separate them using an asterisk (*). For example, to locate a file containing the words "hello" and "this", you can use the command “</rich_text>
      <rich_text weight="heavy">locate -i *hello*this”.</rich_text>
      <rich_text>

</rich_text>
      <rich_text weight="heavy">which -</rich_text>
      <rich_text> One of the common tools is </rich_text>
      <rich_text family="monospace">which</rich_text>
      <rich_text>. This tool returns the  path to the file or link that should be executed. This allows us to  determine if specific programs, like cURL, netcat, wget, python, gcc, are available on the operating system. If the program doesnt exist on this host, it will not be displayed.

</rich_text>
      <rich_text weight="heavy">find</rich_text>
      <rich_text> - Another handy tool is </rich_text>
      <rich_text family="monospace">find</rich_text>
      <rich_text>. Besides the function to find files and folders, this tool also contains the function to filter the results. We can use filter parameters like the size of the file or the date. We can also specify if we only search for files or folders.

</rich_text>
      <rich_text family="monospace" background="#000000000000">find / -type f -name *.conf -user root -size +20k -newermt 2020-03-03 -exec ls -al {} \; 2&gt;/dev/null</rich_text>
      <rich_text>

</rich_text>
      <rich_text weight="heavy">locate - </rich_text>
      <rich_text>It will take much time to search through the whole system for our files and directories to perform many different searches. The command </rich_text>
      <rich_text family="monospace">locate</rich_text>
      <rich_text> offers us a quicker way to search through the system. In contrast to the </rich_text>
      <rich_text family="monospace">find</rich_text>
      <rich_text> command, </rich_text>
      <rich_text family="monospace">locate</rich_text>
      <rich_text> works with a local database that contains all information about existing files and folders. We can update this database with the following command.
</rich_text>
    </node>
    <node name="File System" unique_id="36" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1649604650" ts_lastsave="1649604651">
      <rich_text>
    / - Its root directory.
    /bin - basic programs available for all users.
    /sbin - contains binary executables for root user only.
    /dev - Contains device drivers.
    /etc - Contains configuration files.
    /lib - It contains shared library files.
    /tmp - Temporary files which typically deleted on boot.
    /usr/bin - It contains users binaries.
    /usr/sbin - It contains root user binaries or system binaries.
    /usr/share - It contains application support and data files
    /home - User home directory.
    ~ - User default working directory.
</rich_text>
    </node>
  </node>
</cherrytree>
